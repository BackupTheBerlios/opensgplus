/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                     Copyright 2000,2001 by OpenSG Forum                   *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DVRVolume!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &DVRVolumeBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 DVRVolumeBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
DVRVolumePtr DVRVolumeBase::create(void) 
{
    DVRVolumePtr fc; 

    if(getClassType().getPrototype() != osg::NullFC) 
    {
        fc = DVRVolumePtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
DVRVolumePtr DVRVolumeBase::createEmpty(void) 
{ 
    DVRVolumePtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

inline
SFDVRAppearancePtr *DVRVolumeBase::getSFAppearance(void)
{
    return &_sfAppearance;
}

inline
SFDVRGeometryPtr *DVRVolumeBase::getSFGeometry(void)
{
    return &_sfGeometry;
}

inline
SFDVRShaderPtr *DVRVolumeBase::getSFShader(void)
{
    return &_sfShader;
}

inline
SFString *DVRVolumeBase::getSFFileName(void)
{
    return &_sfFileName;
}

inline
SFReal32 *DVRVolumeBase::getSFSampling(void)
{
    return &_sfSampling;
}

inline
SFReal32 *DVRVolumeBase::getSFSamplingInteractive(void)
{
    return &_sfSamplingInteractive;
}

inline
SFBool *DVRVolumeBase::getSFDoTextures(void)
{
    return &_sfDoTextures;
}

inline
SFUInt32 *DVRVolumeBase::getSFBrickOverlap(void)
{
    return &_sfBrickOverlap;
}

inline
SFQBit *DVRVolumeBase::getSFTextures2D(void)
{
    return &_sfTextures2D;
}

inline
SFMaterialPtr *DVRVolumeBase::getSFRenderMaterial(void)
{
    return &_sfRenderMaterial;
}

inline
SFUInt16 *DVRVolumeBase::getSFBrickingMode(void)
{
    return &_sfBrickingMode;
}

inline
SFUInt16 *DVRVolumeBase::getSFBrickStaticMemoryMB(void)
{
    return &_sfBrickStaticMemoryMB;
}

inline
SFVec3f *DVRVolumeBase::getSFBrickStaticSubdivision(void)
{
    return &_sfBrickStaticSubdivision;
}

inline
SFVec3f *DVRVolumeBase::getSFBrickMaxSize(void)
{
    return &_sfBrickMaxSize;
}

inline
SFBool *DVRVolumeBase::getSFShowBricks(void)
{
    return &_sfShowBricks;
}

inline
SFUInt32 *DVRVolumeBase::getSFDrawStyle(void)
{
    return &_sfDrawStyle;
}

inline
MFString *DVRVolumeBase::getMFDrawStyleNames(void)
{
    return &_mfDrawStyleNames;
}

inline
SFChunkMaterialPtr *DVRVolumeBase::getSFTextureStorage(void)
{
    return &_sfTextureStorage;
}


inline
DVRAppearancePtr &DVRVolumeBase::getAppearance(void)
{
    return _sfAppearance.getValue();
}

inline
const DVRAppearancePtr &DVRVolumeBase::getAppearance(void) const
{
    return _sfAppearance.getValue();
}

inline
void DVRVolumeBase::setAppearance(const DVRAppearancePtr &value)
{
    _sfAppearance.setValue(value);
}

inline
DVRGeometryPtr &DVRVolumeBase::getGeometry(void)
{
    return _sfGeometry.getValue();
}

inline
const DVRGeometryPtr &DVRVolumeBase::getGeometry(void) const
{
    return _sfGeometry.getValue();
}

inline
void DVRVolumeBase::setGeometry(const DVRGeometryPtr &value)
{
    _sfGeometry.setValue(value);
}

inline
DVRShaderPtr &DVRVolumeBase::getShader(void)
{
    return _sfShader.getValue();
}

inline
const DVRShaderPtr &DVRVolumeBase::getShader(void) const
{
    return _sfShader.getValue();
}

inline
void DVRVolumeBase::setShader(const DVRShaderPtr &value)
{
    _sfShader.setValue(value);
}

inline
std::string &DVRVolumeBase::getFileName(void)
{
    return _sfFileName.getValue();
}

inline
const std::string &DVRVolumeBase::getFileName(void) const
{
    return _sfFileName.getValue();
}

inline
void DVRVolumeBase::setFileName(const std::string &value)
{
    _sfFileName.setValue(value);
}

inline
Real32 &DVRVolumeBase::getSampling(void)
{
    return _sfSampling.getValue();
}

inline
const Real32 &DVRVolumeBase::getSampling(void) const
{
    return _sfSampling.getValue();
}

inline
void DVRVolumeBase::setSampling(const Real32 &value)
{
    _sfSampling.setValue(value);
}

inline
Real32 &DVRVolumeBase::getSamplingInteractive(void)
{
    return _sfSamplingInteractive.getValue();
}

inline
const Real32 &DVRVolumeBase::getSamplingInteractive(void) const
{
    return _sfSamplingInteractive.getValue();
}

inline
void DVRVolumeBase::setSamplingInteractive(const Real32 &value)
{
    _sfSamplingInteractive.setValue(value);
}

inline
bool &DVRVolumeBase::getDoTextures(void)
{
    return _sfDoTextures.getValue();
}

inline
const bool &DVRVolumeBase::getDoTextures(void) const
{
    return _sfDoTextures.getValue();
}

inline
void DVRVolumeBase::setDoTextures(const bool &value)
{
    _sfDoTextures.setValue(value);
}

inline
UInt32 &DVRVolumeBase::getBrickOverlap(void)
{
    return _sfBrickOverlap.getValue();
}

inline
const UInt32 &DVRVolumeBase::getBrickOverlap(void) const
{
    return _sfBrickOverlap.getValue();
}

inline
void DVRVolumeBase::setBrickOverlap(const UInt32 &value)
{
    _sfBrickOverlap.setValue(value);
}

inline
QBit &DVRVolumeBase::getTextures2D(void)
{
    return _sfTextures2D.getValue();
}

inline
const QBit &DVRVolumeBase::getTextures2D(void) const
{
    return _sfTextures2D.getValue();
}

inline
void DVRVolumeBase::setTextures2D(const QBit &value)
{
    _sfTextures2D.setValue(value);
}

inline
MaterialPtr &DVRVolumeBase::getRenderMaterial(void)
{
    return _sfRenderMaterial.getValue();
}

inline
const MaterialPtr &DVRVolumeBase::getRenderMaterial(void) const
{
    return _sfRenderMaterial.getValue();
}

inline
void DVRVolumeBase::setRenderMaterial(const MaterialPtr &value)
{
    _sfRenderMaterial.setValue(value);
}

inline
UInt16 &DVRVolumeBase::getBrickingMode(void)
{
    return _sfBrickingMode.getValue();
}

inline
const UInt16 &DVRVolumeBase::getBrickingMode(void) const
{
    return _sfBrickingMode.getValue();
}

inline
void DVRVolumeBase::setBrickingMode(const UInt16 &value)
{
    _sfBrickingMode.setValue(value);
}

inline
UInt16 &DVRVolumeBase::getBrickStaticMemoryMB(void)
{
    return _sfBrickStaticMemoryMB.getValue();
}

inline
const UInt16 &DVRVolumeBase::getBrickStaticMemoryMB(void) const
{
    return _sfBrickStaticMemoryMB.getValue();
}

inline
void DVRVolumeBase::setBrickStaticMemoryMB(const UInt16 &value)
{
    _sfBrickStaticMemoryMB.setValue(value);
}

inline
Vec3f &DVRVolumeBase::getBrickStaticSubdivision(void)
{
    return _sfBrickStaticSubdivision.getValue();
}

inline
const Vec3f &DVRVolumeBase::getBrickStaticSubdivision(void) const
{
    return _sfBrickStaticSubdivision.getValue();
}

inline
void DVRVolumeBase::setBrickStaticSubdivision(const Vec3f &value)
{
    _sfBrickStaticSubdivision.setValue(value);
}

inline
Vec3f &DVRVolumeBase::getBrickMaxSize(void)
{
    return _sfBrickMaxSize.getValue();
}

inline
const Vec3f &DVRVolumeBase::getBrickMaxSize(void) const
{
    return _sfBrickMaxSize.getValue();
}

inline
void DVRVolumeBase::setBrickMaxSize(const Vec3f &value)
{
    _sfBrickMaxSize.setValue(value);
}

inline
bool &DVRVolumeBase::getShowBricks(void)
{
    return _sfShowBricks.getValue();
}

inline
const bool &DVRVolumeBase::getShowBricks(void) const
{
    return _sfShowBricks.getValue();
}

inline
void DVRVolumeBase::setShowBricks(const bool &value)
{
    _sfShowBricks.setValue(value);
}

inline
UInt32 &DVRVolumeBase::getDrawStyle(void)
{
    return _sfDrawStyle.getValue();
}

inline
const UInt32 &DVRVolumeBase::getDrawStyle(void) const
{
    return _sfDrawStyle.getValue();
}

inline
void DVRVolumeBase::setDrawStyle(const UInt32 &value)
{
    _sfDrawStyle.setValue(value);
}

inline
ChunkMaterialPtr &DVRVolumeBase::getTextureStorage(void)
{
    return _sfTextureStorage.getValue();
}

inline
const ChunkMaterialPtr &DVRVolumeBase::getTextureStorage(void) const
{
    return _sfTextureStorage.getValue();
}

inline
void DVRVolumeBase::setTextureStorage(const ChunkMaterialPtr &value)
{
    _sfTextureStorage.setValue(value);
}


inline
std::string &DVRVolumeBase::getDrawStyleNames(const UInt32 index)
{
    return _mfDrawStyleNames[index];
}

inline
MFString &DVRVolumeBase::getDrawStyleNames(void)
{
    return _mfDrawStyleNames;
}

inline
const MFString &DVRVolumeBase::getDrawStyleNames(void) const
{
    return _mfDrawStyleNames;
}

OSG_END_NAMESPACE

#define OSGDVRVOLUMEBASE_INLINE_CVSID "@(#)$Id: OSGDVRVolumeBase.inl,v 1.1 2002/10/10 11:11:26 weiler Exp $"

