/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpClustSterWin!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESIMPCLUSTSTERWININST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGSimpClustSterWinBase.h"
#include "OSGSimpClustSterWin.h"



OSG_USING_NAMESPACE

#ifdef __sgi
#pragma set woff 1174
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGSimpClustSterWinBase.cpp,v 1.1 2002/05/24 15:50:49 fuenfzig Exp $";
    static Char8 cvsid_hpp       [] = OSGSIMPCLUSTSTERWINBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSIMPCLUSTSTERWINBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSIMPCLUSTSTERWINFIELDS_HEADER_CVSID;
}

#ifdef __sgi
#pragma reset woff 1174
#endif

const OSG::BitVector  SimpClustSterWinBase::FovFieldMask = 
    (1 << SimpClustSterWinBase::FovFieldId);

const OSG::BitVector  SimpClustSterWinBase::EyedistanceFieldMask = 
    (1 << SimpClustSterWinBase::EyedistanceFieldId);

const OSG::BitVector  SimpClustSterWinBase::ZeroparallaxFieldMask = 
    (1 << SimpClustSterWinBase::ZeroparallaxFieldId);

const OSG::BitVector  SimpClustSterWinBase::SyncSwapFieldMask = 
    (1 << SimpClustSterWinBase::SyncSwapFieldId);



// Field descriptions

/*! \var Real32          SimpClustSterWinBase::_sfFov
    The vertical field of view, in radians.
*/
/*! \var Real32          SimpClustSterWinBase::_sfEyedistance
    Eye distance
*/
/*! \var Real32          SimpClustSterWinBase::_sfZeroparallax
    zero paralax
*/
/*! \var bool            SimpClustSterWinBase::_sfSyncSwap
    Sync swap if true
*/
//! SimpClustSterWin description

FieldDescription *SimpClustSterWinBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "fov", 
                     FovFieldId, FovFieldMask,
                     false,
                     (FieldAccessMethod) &SimpClustSterWinBase::getSFFov),
    new FieldDescription(SFReal32::getClassType(), 
                     "eyedistance", 
                     EyedistanceFieldId, EyedistanceFieldMask,
                     false,
                     (FieldAccessMethod) &SimpClustSterWinBase::getSFEyedistance),
    new FieldDescription(SFReal32::getClassType(), 
                     "zeroparallax", 
                     ZeroparallaxFieldId, ZeroparallaxFieldMask,
                     false,
                     (FieldAccessMethod) &SimpClustSterWinBase::getSFZeroparallax),
    new FieldDescription(SFBool::getClassType(), 
                     "syncSwap", 
                     SyncSwapFieldId, SyncSwapFieldMask,
                     false,
                     (FieldAccessMethod) &SimpClustSterWinBase::getSFSyncSwap)
};

//! SimpClustSterWin type

FieldContainerType SimpClustSterWinBase::_type(
    "SimpClustSterWin",
    "ClusterWindow",
    NULL,
    (PrototypeCreateF) &SimpClustSterWinBase::createEmpty,
    SimpClustSterWin::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SimpClustSterWinBase, SimpClustSterWinPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SimpClustSterWinBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SimpClustSterWinBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SimpClustSterWinBase::shallowCopy(void) const 
{ 
    SimpClustSterWinPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const SimpClustSterWin *>(this)); 

    return returnValue; 
}

UInt32 SimpClustSterWinBase::getContainerSize(void) const 
{ 
    return sizeof(SimpClustSterWinBase); 
}


void SimpClustSterWinBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SimpClustSterWinBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

SimpClustSterWinBase::SimpClustSterWinBase(void) :
    _sfFov                    (), 
    _sfEyedistance            (), 
    _sfZeroparallax           (), 
    _sfSyncSwap               (bool(true)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

SimpClustSterWinBase::SimpClustSterWinBase(const SimpClustSterWinBase &source) :
    _sfFov                    (source._sfFov                    ), 
    _sfEyedistance            (source._sfEyedistance            ), 
    _sfZeroparallax           (source._sfZeroparallax           ), 
    _sfSyncSwap               (source._sfSyncSwap               ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

SimpClustSterWinBase::~SimpClustSterWinBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SimpClustSterWinBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (FovFieldMask & whichField))
    {
        returnValue += _sfFov.getBinSize();
    }

    if(FieldBits::NoField != (EyedistanceFieldMask & whichField))
    {
        returnValue += _sfEyedistance.getBinSize();
    }

    if(FieldBits::NoField != (ZeroparallaxFieldMask & whichField))
    {
        returnValue += _sfZeroparallax.getBinSize();
    }

    if(FieldBits::NoField != (SyncSwapFieldMask & whichField))
    {
        returnValue += _sfSyncSwap.getBinSize();
    }


    return returnValue;
}

void SimpClustSterWinBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (FovFieldMask & whichField))
    {
        _sfFov.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EyedistanceFieldMask & whichField))
    {
        _sfEyedistance.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ZeroparallaxFieldMask & whichField))
    {
        _sfZeroparallax.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SyncSwapFieldMask & whichField))
    {
        _sfSyncSwap.copyToBin(pMem);
    }


}

void SimpClustSterWinBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (FovFieldMask & whichField))
    {
        _sfFov.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EyedistanceFieldMask & whichField))
    {
        _sfEyedistance.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ZeroparallaxFieldMask & whichField))
    {
        _sfZeroparallax.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SyncSwapFieldMask & whichField))
    {
        _sfSyncSwap.copyFromBin(pMem);
    }


}

void SimpClustSterWinBase::executeSyncImpl(      SimpClustSterWinBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (FovFieldMask & whichField))
        _sfFov.syncWith(pOther->_sfFov);

    if(FieldBits::NoField != (EyedistanceFieldMask & whichField))
        _sfEyedistance.syncWith(pOther->_sfEyedistance);

    if(FieldBits::NoField != (ZeroparallaxFieldMask & whichField))
        _sfZeroparallax.syncWith(pOther->_sfZeroparallax);

    if(FieldBits::NoField != (SyncSwapFieldMask & whichField))
        _sfSyncSwap.syncWith(pOther->_sfSyncSwap);


}

