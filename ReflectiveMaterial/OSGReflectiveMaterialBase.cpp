/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *   Initial coding by Polina Kondratieva                                    *
 *                                                                           *
 *   contact:    PolinaKondratieva@gmx.de     (supervisor Jan Kautz)         *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ReflectiveMaterial!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEREFLECTIVEMATERIALINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGReflectiveMaterialBase.h"
#include "OSGReflectiveMaterial.h"


OSG_USING_NAMESPACE

const OSG::BitVector  ReflectiveMaterialBase::DiffuseFieldMask = 
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::DiffuseFieldId);

const OSG::BitVector  ReflectiveMaterialBase::FresnelFieldMask = 
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::FresnelFieldId);

const OSG::BitVector  ReflectiveMaterialBase::TransparencyFieldMask = 
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::TransparencyFieldId);

const OSG::BitVector  ReflectiveMaterialBase::ImageDiffuseFieldMask = 
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::ImageDiffuseFieldId);

const OSG::BitVector  ReflectiveMaterialBase::ImagePosXFieldMask = 
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::ImagePosXFieldId);

const OSG::BitVector  ReflectiveMaterialBase::ImageNegXFieldMask = 
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::ImageNegXFieldId);

const OSG::BitVector  ReflectiveMaterialBase::ImagePosYFieldMask = 
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::ImagePosYFieldId);

const OSG::BitVector  ReflectiveMaterialBase::ImageNegYFieldMask = 
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::ImageNegYFieldId);

const OSG::BitVector  ReflectiveMaterialBase::ImagePosZFieldMask = 
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::ImagePosZFieldId);

const OSG::BitVector  ReflectiveMaterialBase::ImageNegZFieldMask = 
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::ImageNegZFieldId);

const OSG::BitVector  ReflectiveMaterialBase::LightPosFieldMask = 
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::LightPosFieldId);

const OSG::BitVector  ReflectiveMaterialBase::ViewPosFieldMask =
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::ViewPosFieldId);

const OSG::BitVector  ReflectiveMaterialBase::CompTexCoordFieldMask =
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::CompTexCoordFieldId);

const OSG::BitVector  ReflectiveMaterialBase::HalfBBoxObjFieldMask =
    (TypeTraits<BitVector>::One << ReflectiveMaterialBase::HalfBBoxObjFieldId);

const OSG::BitVector ReflectiveMaterialBase::MTInfluenceMask =
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Color3f         ReflectiveMaterialBase::_sfDiffuse
    diffuse color
*/
/*! \var Color3f         ReflectiveMaterialBase::_sfFresnel
    Fresnel coefficient to control the reflectiviness
*/
/*! \var Real32          ReflectiveMaterialBase::_sfTransparency
    transparency
*/
/*! \var ImagePtr        ReflectiveMaterialBase::_sfImageDiffuse
    The pointer to the own texture of the object (diffuse texture)
*/
/*! \var ImagePtr        ReflectiveMaterialBase::_sfImagePosX
    The pointer to the right cube face image (positive X)
*/
/*! \var ImagePtr        ReflectiveMaterialBase::_sfImageNegX
    The pointer to the left cube face image (negative X)
*/
/*! \var ImagePtr        ReflectiveMaterialBase::_sfImagePosY
    The pointer to the top cube face image (positive Y)
*/
/*! \var ImagePtr        ReflectiveMaterialBase::_sfImageNegY
    The pointer to the bottom cube face image (negative Y)
*/
/*! \var ImagePtr        ReflectiveMaterialBase::_sfImagePosZ
    The pointer to the front cube face image (positive Z)
*/
/*! \var ImagePtr        ReflectiveMaterialBase::_sfImageNegZ
    The pointer to the back cube face image (negative Z)
*/
/*! \var Vec3f           ReflectiveMaterialBase::_sfLightPos
    Light source position
*/
/*! \var Vec3f           ReflectiveMaterialBase::_sfViewPos
    Viewer position
*/
/*! \var bool           ReflectiveMaterialBase::_sfCompTexCoord
    Compute texture coordinates if model does not contain them
*/
/*! \var bool           ReflectiveMaterialBase::_sfCommpTexCoord
    For computation of texture coordinates: length/2 of the diagonal
    of the object's bounding box
*/

//! ReflectiveMaterial description

FieldDescription *ReflectiveMaterialBase::_desc[] = 
{
    new FieldDescription(SFColor3f::getClassType(), 
                     "diffuse", 
                     DiffuseFieldId, DiffuseFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFDiffuse),
    new FieldDescription(SFColor3f::getClassType(), 
                     "Fresnel", 
                     FresnelFieldId, FresnelFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFFresnel),
    new FieldDescription(SFReal32::getClassType(), 
                     "transparency", 
                     TransparencyFieldId, TransparencyFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFTransparency),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "ImageDiffuse", 
                     ImageDiffuseFieldId, ImageDiffuseFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFImageDiffuse),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "ImagePosX", 
                     ImagePosXFieldId, ImagePosXFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFImagePosX),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "ImageNegX", 
                     ImageNegXFieldId, ImageNegXFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFImageNegX),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "ImagePosY", 
                     ImagePosYFieldId, ImagePosYFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFImagePosY),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "ImageNegY", 
                     ImageNegYFieldId, ImageNegYFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFImageNegY),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "ImagePosZ", 
                     ImagePosZFieldId, ImagePosZFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFImagePosZ),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "ImageNegZ", 
                     ImageNegZFieldId, ImageNegZFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFImageNegZ),
    new FieldDescription(SFVec3f::getClassType(), 
                     "lightPos", 
                     LightPosFieldId, LightPosFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFLightPos),
    new FieldDescription(SFVec3f::getClassType(),
                     "viewPos",
                     ViewPosFieldId, ViewPosFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFViewPos),
    new FieldDescription(SFBool::getClassType(),
                     "compTexCoord",
                     CompTexCoordFieldId, CompTexCoordFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFCompTexCoord),
    new FieldDescription(SFReal32::getClassType(),
                     "halfBBoxObj",
                     HalfBBoxObjFieldId, HalfBBoxObjFieldMask,
                     false,
                     (FieldAccessMethod) &ReflectiveMaterialBase::getSFHalfBBoxObj)
};


FieldContainerType ReflectiveMaterialBase::_type(
    "ReflectiveMaterial",
    "ChunkMaterial",
    NULL,
    (PrototypeCreateF) &ReflectiveMaterialBase::createEmpty,
    ReflectiveMaterial::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ReflectiveMaterialBase, ReflectiveMaterialPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ReflectiveMaterialBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ReflectiveMaterialBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ReflectiveMaterialBase::shallowCopy(void) const 
{ 
    ReflectiveMaterialPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const ReflectiveMaterial *>(this)); 

    return returnValue; 
}

UInt32 ReflectiveMaterialBase::getContainerSize(void) const 
{ 
    return sizeof(ReflectiveMaterial); 
}


void ReflectiveMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((ReflectiveMaterialBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ReflectiveMaterialBase::ReflectiveMaterialBase(void) :
    _sfDiffuse                (Color3f(0,0,0)), 
    _sfFresnel                (Color3f(0.05,0.05,0.05)), 
    _sfTransparency           (Real32(0)),
    _sfImageDiffuse           (), 
    _sfImagePosX              (), 
    _sfImageNegX              (), 
    _sfImagePosY              (), 
    _sfImageNegY              (), 
    _sfImagePosZ              (), 
    _sfImageNegZ              (), 
    _sfLightPos               (Vec3f(0,0,1)), 
    _sfViewPos                (Vec3f(0,0,1)),
    _sfCompTexCoord           (bool(false)),
    _sfHalfBBoxObj            (Real32(1)),
    Inherited()
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ReflectiveMaterialBase::ReflectiveMaterialBase(const ReflectiveMaterialBase &source) :
    _sfDiffuse                (source._sfDiffuse                ), 
    _sfFresnel                (source._sfFresnel                ), 
    _sfTransparency           (source._sfTransparency           ), 
    _sfImageDiffuse           (source._sfImageDiffuse           ), 
    _sfImagePosX              (source._sfImagePosX              ), 
    _sfImageNegX              (source._sfImageNegX              ), 
    _sfImagePosY              (source._sfImagePosY              ), 
    _sfImageNegY              (source._sfImageNegY              ), 
    _sfImagePosZ              (source._sfImagePosZ              ), 
    _sfImageNegZ              (source._sfImageNegZ              ), 
    _sfLightPos               (source._sfLightPos               ), 
    _sfViewPos                (source._sfViewPos                ),
    _sfCompTexCoord           (source._sfCompTexCoord           ),
    _sfHalfBBoxObj            (source._sfHalfBBoxObj            ),
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ReflectiveMaterialBase::~ReflectiveMaterialBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ReflectiveMaterialBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        returnValue += _sfDiffuse.getBinSize();
    }

    if(FieldBits::NoField != (FresnelFieldMask & whichField))
    {
        returnValue += _sfFresnel.getBinSize();
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        returnValue += _sfTransparency.getBinSize();
    }

    if(FieldBits::NoField != (ImageDiffuseFieldMask & whichField))
    {
        returnValue += _sfImageDiffuse.getBinSize();
    }

    if(FieldBits::NoField != (ImagePosXFieldMask & whichField))
    {
        returnValue += _sfImagePosX.getBinSize();
    }

    if(FieldBits::NoField != (ImageNegXFieldMask & whichField))
    {
        returnValue += _sfImageNegX.getBinSize();
    }

    if(FieldBits::NoField != (ImagePosYFieldMask & whichField))
    {
        returnValue += _sfImagePosY.getBinSize();
    }

    if(FieldBits::NoField != (ImageNegYFieldMask & whichField))
    {
        returnValue += _sfImageNegY.getBinSize();
    }

    if(FieldBits::NoField != (ImagePosZFieldMask & whichField))
    {
        returnValue += _sfImagePosZ.getBinSize();
    }

    if(FieldBits::NoField != (ImageNegZFieldMask & whichField))
    {
        returnValue += _sfImageNegZ.getBinSize();
    }

    if(FieldBits::NoField != (LightPosFieldMask & whichField))
    {
        returnValue += _sfLightPos.getBinSize();
    }

    if(FieldBits::NoField != (ViewPosFieldMask & whichField))
    {
        returnValue += _sfViewPos.getBinSize();
    }

    if(FieldBits::NoField != (CompTexCoordFieldMask & whichField))
    {
        returnValue += _sfCompTexCoord.getBinSize();
    }

    if(FieldBits::NoField != (HalfBBoxObjFieldMask & whichField))
    {
        returnValue += _sfHalfBBoxObj.getBinSize();
    }


    return returnValue;
}

void ReflectiveMaterialBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FresnelFieldMask & whichField))
    {
        _sfFresnel.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        _sfTransparency.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ImageDiffuseFieldMask & whichField))
    {
        _sfImageDiffuse.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ImagePosXFieldMask & whichField))
    {
        _sfImagePosX.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ImageNegXFieldMask & whichField))
    {
        _sfImageNegX.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ImagePosYFieldMask & whichField))
    {
        _sfImagePosY.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ImageNegYFieldMask & whichField))
    {
        _sfImageNegY.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ImagePosZFieldMask & whichField))
    {
        _sfImagePosZ.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ImageNegZFieldMask & whichField))
    {
        _sfImageNegZ.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LightPosFieldMask & whichField))
    {
        _sfLightPos.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ViewPosFieldMask & whichField))
    {
        _sfViewPos.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CompTexCoordFieldMask & whichField))
    {
        _sfCompTexCoord.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HalfBBoxObjFieldMask & whichField))
    {
        _sfHalfBBoxObj.copyToBin(pMem);
    }


}

void ReflectiveMaterialBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FresnelFieldMask & whichField))
    {
        _sfFresnel.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        _sfTransparency.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ImageDiffuseFieldMask & whichField))
    {
        _sfImageDiffuse.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ImagePosXFieldMask & whichField))
    {
        _sfImagePosX.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ImageNegXFieldMask & whichField))
    {
        _sfImageNegX.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ImagePosYFieldMask & whichField))
    {
        _sfImagePosY.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ImageNegYFieldMask & whichField))
    {
        _sfImageNegY.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ImagePosZFieldMask & whichField))
    {
        _sfImagePosZ.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ImageNegZFieldMask & whichField))
    {
        _sfImageNegZ.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LightPosFieldMask & whichField))
    {
        _sfLightPos.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ViewPosFieldMask & whichField))
    {
        _sfViewPos.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CompTexCoordFieldMask & whichField))
    {
        _sfCompTexCoord.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HalfBBoxObjFieldMask & whichField))
    {
        _sfHalfBBoxObj.copyFromBin(pMem);
    }


}

void ReflectiveMaterialBase::executeSyncImpl(      ReflectiveMaterialBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
        _sfDiffuse.syncWith(pOther->_sfDiffuse);

    if(FieldBits::NoField != (FresnelFieldMask & whichField))
        _sfFresnel.syncWith(pOther->_sfFresnel);

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
        _sfTransparency.syncWith(pOther->_sfTransparency);

    if(FieldBits::NoField != (ImageDiffuseFieldMask & whichField))
        _sfImageDiffuse.syncWith(pOther->_sfImageDiffuse);

    if(FieldBits::NoField != (ImagePosXFieldMask & whichField))
        _sfImagePosX.syncWith(pOther->_sfImagePosX);

    if(FieldBits::NoField != (ImageNegXFieldMask & whichField))
        _sfImageNegX.syncWith(pOther->_sfImageNegX);

    if(FieldBits::NoField != (ImagePosYFieldMask & whichField))
        _sfImagePosY.syncWith(pOther->_sfImagePosY);

    if(FieldBits::NoField != (ImageNegYFieldMask & whichField))
        _sfImageNegY.syncWith(pOther->_sfImageNegY);

    if(FieldBits::NoField != (ImagePosZFieldMask & whichField))
        _sfImagePosZ.syncWith(pOther->_sfImagePosZ);

    if(FieldBits::NoField != (ImageNegZFieldMask & whichField))
        _sfImageNegZ.syncWith(pOther->_sfImageNegZ);

    if(FieldBits::NoField != (LightPosFieldMask & whichField))
        _sfLightPos.syncWith(pOther->_sfLightPos);

    if(FieldBits::NoField != (ViewPosFieldMask & whichField))
        _sfViewPos.syncWith(pOther->_sfViewPos);

    if(FieldBits::NoField != (CompTexCoordFieldMask & whichField))
        _sfCompTexCoord.syncWith(pOther->_sfCompTexCoord);

    if(FieldBits::NoField != (HalfBBoxObjFieldMask & whichField))
        _sfHalfBBoxObj.syncWith(pOther->_sfHalfBBoxObj);


}



OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ReflectiveMaterialPtr>::_type("ReflectiveMaterialPtr", "ChunkMaterialPtr");
#endif


OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGReflectiveMaterialBase.cpp,v 1.1 2003/11/03 19:13:00 jnkautz Exp $";
    static Char8 cvsid_hpp       [] = OSGREFLECTIVEMATERIALBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGREFLECTIVEMATERIALBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGREFLECTIVEMATERIALFIELDS_HEADER_CVSID;
}

