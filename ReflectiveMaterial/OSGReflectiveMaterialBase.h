/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *   Initial coding by Polina Kondratieva                                    *
 *                                                                           *
 *   contact:    PolinaKondratieva@gmx.de   (supervisor Jan Kautz)           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ReflectiveMaterial
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGREFLECTIVEMATERIALBASE_H_
#define _OSGREFLECTIVEMATERIALBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OSGConfig.h>
#include <OSGSystemDef.h>

#include <OSGBaseTypes.h>

#include <OSGChunkMaterial.h>   // Parent

#include <OSGColor3fFields.h>   // Diffuse type
#include <OSGColor3fFields.h>   // Fresnel type
#include <OSGReal32Fields.h>    // Transparency type
#include <OSGImageFields.h>     // ImageDiffuse type
#include <OSGImageFields.h>     // ImagePosX type
#include <OSGImageFields.h>     // ImageNegX type
#include <OSGImageFields.h>     // ImagePosY type
#include <OSGImageFields.h>     // ImageNegY type
#include <OSGImageFields.h>     // ImagePosZ type
#include <OSGImageFields.h>     // ImageNegZ type
#include <OSGVec3fFields.h>     // LightPos type
#include <OSGVec3fFields.h>     // ViewPos type
#include <OSGVec3fFields.h>     // ViewPos type
#include <OSGBoolFields.h>      // CompTexCoord type
#include <OSGReal32Fields.h>    // HalfBBoxObj type

//#include <OSGReflectiveMaterialFields.h>
#include "OSGReflectiveMaterialFields.h"

OSG_BEGIN_NAMESPACE

class ReflectiveMaterial;
class BinaryDataHandler;

//! \brief ReflectiveMaterial Base Class.

class OSG_SYSTEMLIB_DLLMAPPING ReflectiveMaterialBase : public ChunkMaterial
{
  private:

    typedef ChunkMaterial Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    enum
    {
        DiffuseFieldId      = Inherited::NextFieldId,
        FresnelFieldId      = DiffuseFieldId      + 1,
        TransparencyFieldId = FresnelFieldId      + 1,
        ImageDiffuseFieldId = TransparencyFieldId + 1,
        ImagePosXFieldId    = ImageDiffuseFieldId + 1,
        ImageNegXFieldId    = ImagePosXFieldId    + 1,
        ImagePosYFieldId    = ImageNegXFieldId    + 1,
        ImageNegYFieldId    = ImagePosYFieldId    + 1,
        ImagePosZFieldId    = ImageNegYFieldId    + 1,
        ImageNegZFieldId    = ImagePosZFieldId    + 1,
        LightPosFieldId     = ImageNegZFieldId    + 1,
        ViewPosFieldId      = LightPosFieldId     + 1,
        CompTexCoordFieldId = ViewPosFieldId      + 1,
        HalfBBoxObjFieldId  = CompTexCoordFieldId + 1,
        NextFieldId         = HalfBBoxObjFieldId  + 1
        //NextFieldId         = ViewPosFieldId  + 1
    };

    static const OSG::BitVector DiffuseFieldMask;
    static const OSG::BitVector FresnelFieldMask;
    static const OSG::BitVector TransparencyFieldMask;
    static const OSG::BitVector ImageDiffuseFieldMask;
    static const OSG::BitVector ImagePosXFieldMask;
    static const OSG::BitVector ImageNegXFieldMask;
    static const OSG::BitVector ImagePosYFieldMask;
    static const OSG::BitVector ImageNegYFieldMask;
    static const OSG::BitVector ImagePosZFieldMask;
    static const OSG::BitVector ImageNegZFieldMask;
    static const OSG::BitVector LightPosFieldMask;
    static const OSG::BitVector ViewPosFieldMask;
    static const OSG::BitVector CompTexCoordFieldMask;
    static const OSG::BitVector HalfBBoxObjFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFColor3f           *getSFDiffuse        (void);
           SFColor3f           *getSFFresnel        (void);
           SFReal32            *getSFTransparency   (void);
           SFImagePtr          *getSFImageDiffuse   (void);
           SFImagePtr          *getSFImagePosX      (void);
           SFImagePtr          *getSFImageNegX      (void);
           SFImagePtr          *getSFImagePosY      (void);
           SFImagePtr          *getSFImageNegY      (void);
           SFImagePtr          *getSFImagePosZ      (void);
           SFImagePtr          *getSFImageNegZ      (void);
           SFVec3f             *getSFLightPos       (void);
           SFVec3f             *getSFViewPos        (void);
           SFBool              *getSFCompTexCoord   (void);
           SFReal32            *getSFHalfBBoxObj    (void);

           Color3f             &getDiffuse        (void);
     const Color3f             &getDiffuse        (void) const;
           Color3f             &getFresnel        (void);
     const Color3f             &getFresnel        (void) const;
           Real32              &getTransparency   (void);
     const Real32              &getTransparency   (void) const;
           ImagePtr            &getImageDiffuse   (void);
     const ImagePtr            &getImageDiffuse   (void) const;
           ImagePtr            &getImagePosX      (void);
     const ImagePtr            &getImagePosX      (void) const;
           ImagePtr            &getImageNegX      (void);
     const ImagePtr            &getImageNegX      (void) const;
           ImagePtr            &getImagePosY      (void);
     const ImagePtr            &getImagePosY      (void) const;
           ImagePtr            &getImageNegY      (void);
     const ImagePtr            &getImageNegY      (void) const;
           ImagePtr            &getImagePosZ      (void);
     const ImagePtr            &getImagePosZ      (void) const;
           ImagePtr            &getImageNegZ      (void);
     const ImagePtr            &getImageNegZ      (void) const;
           Vec3f               &getLightPos       (void);
     const Vec3f               &getLightPos       (void) const;
           Vec3f               &getViewPos        (void);
     const Vec3f               &getViewPos        (void) const;
           bool                &getCompTexCoord   (void);
     const bool                &getCompTexCoord   (void) const;
           Real32              &getHalfBBoxObj    (void);
     const Real32              &getHalfBBoxObj    (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setDiffuse        ( const Color3f &value );
     void setFresnel        ( const Color3f &value );
     void setTransparency   ( const Real32 &value );
     void setImageDiffuse   ( const ImagePtr &value );
     void setImagePosX      ( const ImagePtr &value );
     void setImageNegX      ( const ImagePtr &value );
     void setImagePosY      ( const ImagePtr &value );
     void setImageNegY      ( const ImagePtr &value );
     void setImagePosZ      ( const ImagePtr &value );
     void setImageNegZ      ( const ImagePtr &value );
     void setLightPos       ( const Vec3f &value );
     void setViewPos        ( const Vec3f &value );
     void setCompTexCoord   ( const bool  &value );
     void setHalfBBoxObj    ( const Real32 &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ReflectiveMaterialPtr      create          (void); 
    static  ReflectiveMaterialPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFColor3f           _sfDiffuse;
    SFColor3f           _sfFresnel;
    SFReal32            _sfTransparency;
    SFImagePtr          _sfImageDiffuse;
    SFImagePtr          _sfImagePosX;
    SFImagePtr          _sfImageNegX;
    SFImagePtr          _sfImagePosY;
    SFImagePtr          _sfImageNegY;
    SFImagePtr          _sfImagePosZ;
    SFImagePtr          _sfImageNegZ;
    SFVec3f             _sfLightPos;
    SFVec3f             _sfViewPos;
    SFBool              _sfCompTexCoord;
    SFReal32            _sfHalfBBoxObj;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ReflectiveMaterialBase(void);
    ReflectiveMaterialBase(const ReflectiveMaterialBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ReflectiveMaterialBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    void executeSyncImpl(      ReflectiveMaterialBase *pOther,
                         const BitVector         &whichField);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ReflectiveMaterialBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef ReflectiveMaterialBase *ReflectiveMaterialBaseP;

OSG_END_NAMESPACE

#define OSGREFLECTIVEMATERIALBASE_HEADER_CVSID "@(#)$Id: OSGReflectiveMaterialBase.h,v 1.1 2003/11/03 19:13:00 jnkautz Exp $"

#endif /* _OSGREFLECTIVEMATERIALBASE_H_ */
