/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000-2002 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/



// System declarations

#include <OSGConfig.h>

// Class declarations
#include "OSGSimpleSphericalHarmonics.h"

OSG_USING_NAMESPACE

SimpleSphericalHarmonics::SimpleSphericalHarmonics( int _Lmax ) 
{
  init();

//    fprintf( stderr, "got into constructor\n");
  if ( _Lmax > 4 ){
    fprintf( stderr, "Lmax is %d\n", _Lmax );
    fprintf( stderr, "Error in constructor SimpleSphericalHarmonics:\n");
    fprintf( stderr, "Can't handle Lmax > 4, setting to 4\n");
    _Lmax = 4;
  }
  assert( _Lmax <= 4 );

  Lmax = _Lmax;
  numBasis = (Lmax+1)*(Lmax+1);

//    coefficients = new Vec3f[numBasis];
//    YlmTemp = new float[numBasis];

  // have to be set to 0!
  for( int i = 0; i < numBasis; i++ ) {
    coefficients[i] = Vec3f( 0.0, 0.0, 0.0 );
  }
}

SimpleSphericalHarmonics::SimpleSphericalHarmonics( const SimpleSphericalHarmonics &sh )
{
  init();
  (*this) = sh;
}

void
SimpleSphericalHarmonics::computeYlmArray( const Vec3f &dir )
{
  float x = dir[0];
  float y = dir[1];
  float z = dir[2];

  if( Lmax >= 0 ) {
    YlmTemp[0] = 0.282095;     //0,0   // 1/sqrt(4pi)
  }

  if( Lmax >= 1 ) {
    YlmTemp[1] = 0.488603 * y; //1,-1    //sqrt(3/4pi)
    YlmTemp[2] = 0.488603 * z; //1,0
    YlmTemp[3] = 0.488603 * x; //1,1
  }
	
  if( Lmax >= 2 ) {
    YlmTemp[4] = 1.092548 * x * y; //2,-2   // sqrt(15/4pi)
    YlmTemp[5] = 1.092548 * y * z; //2,-1
    YlmTemp[6] = 0.315392 * (3*z*z - 1 ); //2,0  // sqrt(5/16pi)
    YlmTemp[7] = 1.092548 * x * z; //2, 1
    YlmTemp[8] = 0.546274 * (x*x - y*y); //2,2  // sqrt( 15/16pi )
  }
	
  if( Lmax >= 3 ) {
    const float fY30const = 0.25*sqrt(7/M_PI);
    const float fY31const = 1/8.0*sqrt(42/M_PI);
    const float fY32const = 0.25*sqrt(105/M_PI);
    const float fY33const = 1/8.0*sqrt(70/M_PI);
    YlmTemp[ 9] = fY33const*y*(3*x*x - y*y); //3,-3
    YlmTemp[10] = fY32const*2*x*y*z; // 3,-2
    YlmTemp[11] = fY31const*y*(5*z*z-1); // 3,-1
    YlmTemp[12] = fY30const*z*(5*z*z-3); // 3,0
    YlmTemp[13] = fY31const*x*(5*z*z-1); // 3,1
    YlmTemp[14] = fY32const*z*(x*x-y*y); // 3,2
    YlmTemp[15] = fY33const*x*(x*x-3*y*y); // 3,3
  }

  if( Lmax >= 4 ) {
    YlmTemp[16] = 0.75f*sqrt(35.0f/M_PI)*x*y*(x*x-y*y); // 4,-4
    YlmTemp[17] = 3.0f*1.0/8.0*sqrt(70/M_PI)*y*z*(3*x*x-y*y); // 4,-3
    YlmTemp[18] = 3.0f*0.25*sqrt(5.0/M_PI)*y*x*(7*z*z-1); // 4,-2
    YlmTemp[19] = 3.0/8.0*sqrt(10.0/M_PI)*y*z*(7*z*z-3); //4,-1
    YlmTemp[20] = 3.0f/2.0f/sqrt(M_PI)*(z*z*z*z - 3*z*z*(x*x+y*y) + 3.0f/8.0f*(x*x+y*y)*(x*x+y*y)); // 4,0
    YlmTemp[21] = 3.0f/8.0f*sqrt(10.0/M_PI)*x*z*(7*z*z-3.0f); // 4,1
    YlmTemp[22] = 3.0f/8.0f*sqrt(5.0f/M_PI)*(x*x-y*y)*(7*z*z-1); // 4,2
    YlmTemp[23] = 3.0f/8.0*sqrt(70/M_PI)*x*z*(x*x - 3*y*y); // 4,3
    YlmTemp[24] = 3.0f*sqrt(35.0f/M_PI)/16.0f*(x*x*x*x - 6*x*x*y*y + y*y*y*y); // 4,4
  }

  return;
}


// Code for rotating the coefficients

inline void RotateLinear( Vec3f *pCIn, Vec3f *pCOut,
			  const float *pR0, const float *pR1, const float *pR2 ) {
  const Vec3f &C1m1= pCIn[0];
  const Vec3f &C10 = pCIn[1];
  const Vec3f &C11 = pCIn[2];
  
  pCOut[0] = C10*pR2[1] + C11*pR0[1] + C1m1*pR1[1]; // Y1m1
  pCOut[1] = C10*pR2[2] + C11*pR0[2] + C1m1*pR1[2]; // Y10
  pCOut[2] = C10*pR2[0] + C11*pR0[0] + C1m1*pR1[0]; // Y11
}



inline void RotateQuadratic( Vec3f *pCIn, Vec3f *pCOut,
			     const float *pR0, const float *pR1, const float *pR2 ) {
  const float r00 = pR0[0];
  const float r01 = pR0[1];
  const float r02 = pR0[2];

  const float r10 = pR1[0];
  const float r11 = pR1[1];
  const float r12 = pR1[2];

  const float r20 = pR2[0];
  const float r21 = pR2[1];
  const float r22 = pR2[2];

  const Vec3f &C2m2 = pCIn[0];
  const Vec3f &C2m1 = pCIn[1];
  const Vec3f &C20  = pCIn[2];
  const Vec3f &C21  = pCIn[3];
  const Vec3f &C22  = pCIn[4];
	

  const float fNF = sqrt(3.0f)/3.0f;
  pCOut[2] // Y20
    = 0.5f*(2.0f*r22*r22 - r21*r21 - r20*r20)*C20 +
    fNF*(2.0f*r02*r22 - r00*r20 - r01*r21)*C21 +
    fNF*0.5f*(2.0f*r02*r02 + r11*r11 - 2.0f*r12*r12 - r00*r00 - r01*r01 + r10*r10)*C22 +
    fNF*(2*r12*r22 - r11*r21 -r10*r20)*C2m1 +
    fNF*(2*r02*r12 - r00*r10 - r01*r11)*C2m2;

  //Y21
  pCOut[3] = 
    fNF*3.0f*r20*r22*   C20 + 
    (r00*r22 + r02*r20)*C21 + 
    (r00*r02 - r10*r12)*C22 + 
    (r10*r22 + r12*r20)*C2m1 +
    (r00*r12 + r02*r10)*C2m2;

  //Y22
  pCOut[4] = 
    1.5f*fNF*(r20*r20 - r21*r21)*C20 +
    (r00*r20 - r01*r21)*C21 +
    0.5f*(r00*r00 + r11*r11 - r01*r01 - r10*r10)*C22 +
    (r10*r20 - r11*r21)*C2m1 +
    (r00*r10 - r01*r11)*C2m2;

  //Y2m1
  pCOut[1] =
    3*fNF*r21*r22*      C20 + 
    (r02*r21 + r01*r22)*C21 +
    (r01*r02 - r11*r12)*C22 + 
    (r12*r21 + r11*r22)*C2m1 +
    (r02*r11 + r01*r12)*C2m2;

  //Y2m2
  pCOut[0] = 
    3*fNF*r20*r21*      C20 + 
    (r01*r20 + r00*r21)*C21 +
    (r00*r01 - r10*r11)*C22 + 
    (r10*r21 + r11*r20)*C2m1 +
    (r00*r11 + r01*r10)*C2m2;
}

inline void RotateCubic( Vec3f *pCIn, Vec3f *pCOut,
			 const float *pR0, 
			 const float *pR1, 
			 const float *pR2 )
{
  const float r00 = pR0[0];
  const float r01 = pR0[1];
  const float r02 = pR0[2];

  const float r10 = pR1[0];
  const float r11 = pR1[1];
  const float r12 = pR1[2];

  const float r20 = pR2[0];
  const float r21 = pR2[1];
  const float r22 = pR2[2];

  const Vec3f &C3m3 = pCIn[0];
  const Vec3f &C3m2 = pCIn[1];
  const Vec3f &C3m1 = pCIn[2];
  const Vec3f &C30  = pCIn[3];
  const Vec3f &C31  = pCIn[4];
  const Vec3f &C32  = pCIn[5];
  const Vec3f &C33  = pCIn[6];

  // Code automatically generated by Maple

  //Y30
  pCOut[3] = -C30*r22*(-2.0*r22*r22+3.0*r20*r20+3.0*r21*r21)*0.5 +
    -C31*sqrt(6.0)*(-2.0*r02*r22*r22+r02*r20*r20+r02*r21*r21
		    +r01*r21*r22*2.0+r00*r20*r22*2.0)*0.25 +
    -C32*sqrt(15.0)*(r22*r00*r00-2.0*r20*r10*r12+r22*r01*r01+2.0*r01*r21*r02
		     -2.0*r21*r11*r12-r22*r10*r10+2.0*r22*r12*r12-2.0*r22*r02*r02
		     +2.0*r00*r20*r02-r22*r11*r11)*0.1 +
    -C33*sqrt(10.0)*(-2.0*r02*r02*r02+6.0*r02*r12*r12+3.0*r01*r01*r02
		     -3.0*r02*r10*r10-6.0*r01*r11*r12-6.0*r00*r10*r12
		     -3.0*r02*r11*r11+3.0*r00*r00*r02)*0.05 +
    -C3m1*sqrt(6.0)*(2.0*r21*r11*r22+2.0*r20*r10*r22+r12*r21*r21
		     -2.0*r12*r22*r22+r12*r20*r20)*0.25 +
    -C3m2*sqrt(15.0)*(r00*r12*r20+r01*r12*r21+r01*r11*r22
		      +r02*r10*r20-2.0*r02*r12*r22+r00*r10*r22
		      +r02*r11*r21)*0.2 +
    -C3m3*sqrt(10.0)*(3.0*r12*r01*r01+3.0*r12*r00*r00+6.0*r00*r10*r02
		      +6.0*r01*r11*r02-3.0*r10*r10*r12-6.0*r12*r02*r02
		      -3.0*r11*r11*r12+2.0*r12*r12*r12)*0.05;

  //Y31
  pCOut[4] =	-C30*sqrt(6.0)*r20*(r20*r20+r21*r21-4.0*r22*r22)*0.25 +
    -C31*(r00*r21*r21+3.0*r00*r20*r20-4.0*r00*r22*r22+2.0*r01*r20*r21
	  -8.0*r02*r20*r22)*0.25 +
    -C32*sqrt(2.0)*sqrt(5.0)*(-3.0*r20*r10*r10-8.0*r22*r00*r02+3.0*r20*r00*r00
			      -r20*r11*r11+2.0*r21*r00*r01-2.0*r21*r10*r11+
			      8.0*r22*r10*r12+r20*r01*r01+4.0*r20*r12*r12
			      -4.0*r20*r02*r02)*0.05 +
    -C33*sqrt(3.0)*sqrt(5.0)*(r00*r00*r00+8.0*r02*r10*r12-4.0*r00*r02*r02-
			      3.0*r00*r10*r10-r00*r11*r11+r00*r01*r01
			      -2.0*r01*r10*r11+4.0*r00*r12*r12)*0.05 +
    C3m1*(-2.0*r11*r20*r21+8.0*r12*r20*r22-r10*r21*r21+4.0*r10*r22*r22-3.0*r10*r20*r20)*0.25 +
    C3m2*sqrt(2.0)*sqrt(5.0)*(-r01*r10*r21+4.0*r02*r12*r20-r00*r11*r21+4.0*r02*r10*r22
			      +4.0*r00*r12*r22-3.0*r00*r10*r20-r01*r11*r20)*0.1 +
    -C3m3*sqrt(3.0)*sqrt(5.0)*(-r10*r10*r10+3.0*r10*r00*r00+4.0*r10*r12*r12
			       -8.0*r12*r00*r02+r10*r01*r01+2.0*r11*r00*r01
			       -r10*r11*r11-4.0*r10*r02*r02)*0.05;

  //Y32
  pCOut[5] =	C30*sqrt(15.0)*r22*(-r21*r21+r20*r20)*0.5 +
    C31*sqrt(5.0)*sqrt(2.0)*(-r02*r21*r21+r02*r20*r20+2.0*r00*r20*r22-2.0*r01*r21*r22)*0.25 +
    -C32*(r22*r01*r01-2.0*r21*r11*r12-2.0*r00*r20*r02-r22*r00*r00
	  -r22*r11*r11+2.0*r20*r10*r12+2.0*r01*r21*r02+r22*r10*r10)*0.5 +
    C33*sqrt(3.0)*sqrt(2.0)*(r00*r00*r02+r02*r11*r11-2.0*r00*r10*r12
			     +2.0*r01*r11*r12-r02*r10*r10-r01*r01*r02)*0.25 +
    C3m1*sqrt(5.0)*sqrt(2.0)*(2.0*r20*r10*r22+r12*r20*r20-r12*r21*r21-2.0*r21*r11*r22)*0.25 +
    C3m2*(r00*r12*r20-r01*r12*r21+r00*r10*r22+r02*r10*r20-r01*r11*r22-r02*r11*r21) + 
    -C3m3*sqrt(3.0)*sqrt(2.0)*(-2.0*r00*r10*r02+r10*r10*r12-r12*r00*r00+2.0*r01*r11*r02+r12*r01*r01-r11*r11*r12)*0.25;

  //Y33
  pCOut[6] =	C30*sqrt(10.0)*r20*(r20*r20-3.0*r21*r21)*0.25 +
    C31*sqrt(5.0)*sqrt(3.0)*(r00*r20*r20-r00*r21*r21-2.0*r01*r20*r21)*0.25 +
    -C32*sqrt(2.0)*sqrt(3.0)*(2.0*r21*r00*r01-2.0*r21*r10*r11-r20*r11*r11-r20*r00*r00+r20*r01*r01+r20*r10*r10)*0.25 +
    -C33*(3.0*r00*r01*r01-3.0*r00*r11*r11+3.0*r00*r10*r10-6.0*r01*r10*r11-r00*r00*r00)*0.25 +
    C3m1*sqrt(5.0)*sqrt(3.0)*(-r10*r21*r21+r10*r20*r20-2.0*r11*r20*r21)*0.25 +
    -C3m2*sqrt(2.0)*sqrt(3.0)*(r00*r11*r21-r00*r10*r20+r01*r11*r20+r01*r10*r21)*0.5 +
    -C3m3*(r10*r10*r10+6.0*r11*r00*r01+3.0*r10*r01*r01-3.0*r10*r00*r00-3.0*r10*r11*r11)*0.25;

  //Y3m1
  pCOut[2] =	-C30*sqrt(6.0)*r21*(r20*r20+r21*r21-4.0*r22*r22)*0.25 +
    -C31*(3.0*r01*r21*r21-8.0*r02*r21*r22+2.0*r00*r20*r21+r01*r20*r20-4.0*r01*r22*r22)*0.25 +
    -C32*sqrt(2.0)*sqrt(5.0)*(-3.0*r21*r11*r11+4.0*r21*r12*r12-r21*r10*r10-8.0*r22*r01*r02
			      +r21*r00*r00-4.0*r21*r02*r02+8.0*r22*r11*r12+3.0*r21*r01*r01
			      -2.0*r20*r10*r11+2.0*r00*r20*r01)*0.05 +
    -C33*sqrt(3.0)*sqrt(5.0)*(r01*r01*r01-r01*r10*r10+4.0*r01*r12*r12+r00*r00*r01-2.0*r00*r10*r11
			      -3.0*r01*r11*r11+8.0*r02*r11*r12-4.0*r01*r02*r02)*0.05  +
    C3m1*(-3.0*r11*r21*r21-r11*r20*r20+4.0*r11*r22*r22+8.0*r12*r21*r22-2.0*r20*r10*r21)*0.25 +
    C3m2*sqrt(2.0)*sqrt(5.0)*(4.0*r02*r11*r22-3.0*r01*r11*r21+4.0*r02*r12*r21-r01*r10*r20-r00*r11*r20
			      -r00*r10*r21+4.0*r01*r12*r22)*0.1  +
    -C3m3*sqrt(3.0)*sqrt(5.0)*(-r11*r11*r11+2.0*r00*r10*r01+4.0*r11*r12*r12+3.0*r11*r01*r01
			       -r10*r10*r11+r11*r00*r00-8.0*r01*r12*r02-4.0*r11*r02*r02)*0.05;

  //Y3m2
  pCOut[1] =	C30*sqrt(15.0)*r20*r21*r22 +
    C31*sqrt(5.0)*sqrt(2.0)*(r00*r21*r22+r01*r20*r22+r02*r20*r21)*0.5 +
    -C32*(r22*r10*r11-r22*r00*r01+r20*r11*r12-r00*r21*r02+r21*r10*r12-r01*r20*r02) +
    -C33*sqrt(3.0)*sqrt(2.0)*(r00*r11*r12-r00*r01*r02+r01*r10*r12+r02*r10*r11)*0.5 +
    C3m1*sqrt(5.0)*sqrt(2.0)*(r21*r10*r22+r20*r11*r22+r12*r20*r21)*0.5 +
    C3m2*(r01*r10*r22+r01*r12*r20+r02*r10*r21+r00*r12*r21+r00*r11*r22+r02*r11*r20) +
    C3m3*sqrt(3.0)*sqrt(2.0)*(r00*r12*r01+r00*r11*r02+r01*r10*r02-r10*r11*r12)*0.5;

  //Y3m3
  pCOut[0] =	C30*sqrt(10.0)*r21*(3.0*r20*r20-r21*r21)*0.25 +
    C31*sqrt(5.0)*sqrt(3.0)*(-r01*r21*r21+r01*r20*r20+2.0*r00*r20*r21)*0.25 +
    C32*sqrt(2.0)*sqrt(3.0)*(r21*r11*r11-r21*r10*r10+r21*r00*r00-r21*r01*r01-2.0*r20*r10*r11+2.0*r00*r20*r01)*0.25 +
    -C33*(-3.0*r01*r11*r11+3.0*r01*r10*r10+r01*r01*r01+6.0*r00*r10*r11-3.0*r00*r00*r01)*0.25 +
    C3m1*sqrt(5.0)*sqrt(3.0)*(2.0*r20*r10*r21+r11*r20*r20-r11*r21*r21)*0.25 +
    C3m2*sqrt(2.0)*sqrt(3.0)*(-r01*r11*r21+r00*r11*r20+r01*r10*r20+r00*r10*r21)*0.5 +
    -C3m3*(-r11*r11*r11+3.0*r10*r10*r11+3.0*r11*r01*r01-3.0*r11*r00*r00-6.0*r00*r10*r01)*0.25;
}

inline void RotateQuartic( Vec3f *pCIn, Vec3f *pCOut,
			   const float *pR0, 
			   const float *pR1, 
			   const float *pR2 )
{
  const float r00 = pR0[0];
  const float r01 = pR0[1];
  const float r02 = pR0[2];

  const float r10 = pR1[0];
  const float r11 = pR1[1];
  const float r12 = pR1[2];

  const float r20 = pR2[0];
  const float r21 = pR2[1];
  const float r22 = pR2[2];

  const Vec3f &C4m4 = pCIn[0];
  const Vec3f &C4m3 = pCIn[1];
  const Vec3f &C4m2 = pCIn[2];
  const Vec3f &C4m1 = pCIn[3];
  const Vec3f &C40  = pCIn[4];
  const Vec3f &C41  = pCIn[5];
  const Vec3f &C42  = pCIn[6];
  const Vec3f &C43  = pCIn[7];
  const Vec3f &C44  = pCIn[8];

  // Ugly Maple code

  Vec3f t0;

  t0 = C40*(96.0*r22*r22*r10*r10-24.0*r02*r02*r10*r10-192.0*r20*r20*
	    r22*r22-72.0*r01*r01*r02*r02+18.0*r01*r01*r11*r11-24.0*r20*r20*r11*r11+48.0*r20
	    *r20*r21*r21-72.0*r21*r21*r01*r01+6.0*r00*r00*r11*r11-192.0*r22*r22*r02*r02
	    -24.0*r02*r02*r11*r11-72.0*r10*r10*r12*r12+96.0*r21*r21*r02*r02+18.0*r00*r00*
	    r01*r01+96.0*r21*r21*r12*r12-72.0*r11*r11*r12*r12-72.0*r00*r00*r02*r02-192.0*
	    r21*r21*r22*r22+96.0*r22*r22*r01*r01+96.0*r20*r20*r02*r02-24.0*r21*r21*r10*r10
	    -24.0*r21*r21*r00*r00-24.0*r00*r00*r12*r12-72.0*r20*r20*r00*r00-72.0*r20*r20*
	    r10*r10-72.0*r21*r21*r11*r11-24.0*r01*r01*r12*r12+18.0*r00*r00*r10*r10-192.0*
	    r22*r22*r12*r12+6.0*r01*r01*r10*r10+96.0*r22*r22*r00*r00+96.0*r22*r22*r11*r11
	    -24.0*r20*r20*r01*r01+96.0*r20*r20*r12*r12+384.0*r00*r20*r22*r02-96.0*r01*r11*
	    r02*r12+18.0*r10*r10*r11*r11+384.0*r10*r20*r22*r12+48.0*r02*r02*r12*r12-96.0*
	    r10*r20*r21*r11-96.0*r00*r20*r21*r01+24.0*r20*r20*r20*r20+9.0*r00*r00*r00*r00+
	    24.0*r21*r21*r21*r21+24.0*r12*r12*r12*r12+24.0*r02*r02*r02*r02+64.0*r22*r22*r22
	    *r22+9.0*r10*r10*r10*r10+9.0*r01*r01*r01*r01+9.0*r11*r11*r11*r11+384.0*r11*r21*
	    r22*r12+24.0*r10*r00*r01*r11-96.0*r00*r10*r02*r12+384.0*r01*r21*r22*r02)*0.0035714286f;
	
  t0 += C41*sqrt(10.0)*(3.0*r01*r21*r20*r20-12.0*r00*r20*r22*r22-12.0*r02*r22*r21*
			r21+3.0*r00*r21*r21*r20-12.0*r02*r22*r20*r20-12.0*r01*r22*r22*r21+3.0*r00*
			r20*r20*r20+8.0*r02*r22*r22*r22+3.0*r01*r21*r21*r21)*0.05;
	
  t0 += -C42*sqrt(5.0)*(-4.0*r22*r22*r10*r10+16.0*r01*r21*r22*r02-4.0*r00*r20*
			r21*r01-16.0*r11*r21*r22*r12-16.0*r10*r20*r22*r12+4.0*r10*r20*r21*r11+16.0*r00*
			r20*r22*r02-r20*r20*r01*r01-4.0*r20*r20*r12*r12+4.0*r22*r22*r00*r00-4.0*r22*r22
			*r11*r11+3.0*r21*r21*r11*r11+8.0*r22*r22*r12*r12-3.0*r20*r20*r00*r00+3.0*r20*
			r20*r10*r10+4.0*r20*r20*r02*r02-r21*r21*r00*r00+r21*r21*r10*r10+4.0*r21*r21*r02
			*r02+4.0*r22*r22*r01*r01-4.0*r21*r21*r12*r12-3.0*r21*r21*r01*r01-8.0*r22*r22*
			r02*r02+r20*r20*r11*r11)*0.05;
	
  t0 += -C43*sqrt(70.0)*(-3.0*r00*r00*r00*r20-24.0*r02*r11*r21*r12-24.0*r00*r10*
			 r22*r12-24.0*r02*r10*r20*r12-24.0*r01*r11*r22*r12-3.0*r01*r01*r01*r21-8.0*r02*
			 r02*r02*r22+6.0*r01*r10*r20*r11+9.0*r01*r21*r11*r11+12.0*r22*r00*r00*r02-3.0*
			 r01*r01*r20*r00+12.0*r01*r21*r02*r02+3.0*r00*r20*r11*r11-12.0*r00*r20*r12*r12+
			 24.0*r02*r22*r12*r12+12.0*r22*r01*r01*r02+9.0*r00*r20*r10*r10-12.0*r02*r22*r10*
			 r10+6.0*r00*r10*r21*r11-12.0*r02*r22*r11*r11-12.0*r01*r21*r12*r12-3.0*r21*r00*
			 r00*r01+3.0*r01*r21*r10*r10+12.0*r02*r02*r20*r00)*0.0071428571;
	
  t0 += C44*sqrt(35.0)*(24.0*r02*r02*r10*r10-24.0*r01*r01*r02*r02-18.0*r01*r01*
			r11*r11-6.0*r00*r00*r11*r11+24.0*r02*r02*r11*r11-24.0*r10*r10*r12*r12+6.0*r00*
			r00*r01*r01-24.0*r10*r00*r01*r11+96.0*r00*r10*r02*r12-48.0*r02*r02*r12*r12+96.0
			*r01*r11*r02*r12+3.0*r00*r00*r00*r00+8.0*r12*r12*r12*r12+8.0*r02*r02*r02*r02+
			3.0*r10*r10*r10*r10+3.0*r01*r01*r01*r01+3.0*r11*r11*r11*r11+24.0*r01*r01*r12*
			r12-18.0*r00*r00*r10*r10-6.0*r01*r01*r10*r10+6.0*r10*r10*r11*r11-24.0*r11*r11*
			r12*r12-24.0*r00*r00*r02*r02+24.0*r00*r00*r12*r12)*0.0035714286;
	
  t0 += C4m1*sqrt(10.0)*(8.0*r12*r22*r22*r22-12.0*r12*r22*r20*r20+3.0*r10*r20*r20*r20-
			 12.0*r11*r21*r22*r22-12.0*r10*r22*r22*r20-12.0*r12*r21*r21*r22+3.0*r11*r21
			 *r21*r21+3.0*r10*r20*r21*r21+3.0*r11*r20*r20*r21)*0.05;
	
	
  t0 += C4m2*sqrt(5.0)*(2.0*r00*r11*r20*r21-8.0*r02*r11*r21*r22-8.0*r00*r12*r20*
			r22+8.0*r02*r12*r22*r22+2.0*r01*r10*r20*r21+r00*r10*r21*r21+3.0*r01*r11*r21*r21
			+r01*r11*r20*r20-4.0*r02*r12*r21*r21-4.0*r00*r10*r22*r22-4.0*r01*r11*r22*r22
			-4.0*r02*r12*r20*r20-8.0*r02*r10*r20*r22+3.0*r00*r10*r20*r20-8.0*r01*r12*r21*
			r22)*0.1;
	
  t0 += -C4m3*sqrt(70.0)*(-9.0*r11*r21*r01*r01-9.0*r10*r20*r00*r00-12.0*r12*r12*
			  r20*r10+3.0*r10*r20*r11*r11-12.0*r12*r22*r10*r10+8.0*r12*r12*r12*r22+3.0*r11*
			  r11*r11*r21-6.0*r00*r11*r20*r01-3.0*r10*r20*r01*r01+12.0*r10*r20*r02*r02-12.0*
			  r12*r12*r21*r11+24.0*r00*r10*r22*r02+12.0*r11*r21*r02*r02-6.0*r00*r10*r21*r01+
			  3.0*r11*r21*r10*r10-12.0*r12*r22*r11*r11+3.0*r10*r10*r10*r20+24.0*r01*r12*r21*
			  r02+12.0*r12*r22*r01*r01-3.0*r11*r21*r00*r00+12.0*r12*r22*r00*r00-24.0*r12*r22*
			  r02*r02+24.0*r00*r12*r20*r02+24.0*r01*r11*r22*r02)*0.0071428571;
	
  t0 += -C4m4*sqrt(35.0)*(8.0*r02*r12*r12*r12-3.0*r01*r01*r01*r11-12.0*r00*r12*
			  r12*r10+12.0*r02*r02*r11*r01+3.0*r00*r11*r11*r10+3.0*r01*r10*r10*r11-12.0*r02*
			  r10*r10*r12-3.0*r01*r01*r10*r00+12.0*r02*r12*r00*r00+12.0*r12*r01*r01*r02-3.0*
			  r00*r00*r00*r10+3.0*r00*r10*r10*r10-12.0*r01*r12*r12*r11-8.0*r02*r02*r02*r12+
			  3.0*r01*r11*r11*r11-3.0*r01*r11*r00*r00+12.0*r02*r02*r10*r00-12.0*r02*r12*r11*
			  r11)*0.014285714;

	
  pCOut[4] = t0; // Y40
	
  t0 = -C40*sqrt(10.0)*(-24.0*r21*r22*r00*r01+9.0*r10*r10*r10*r12+6.0*r11*r00*
			r01*r12+48.0*r00*r22*r22*r02-24.0*r21*r22*r10*r11-24.0*r01*r20*r21*r02+6.0*r01*
			r02*r10*r11-24.0*r11*r20*r21*r12+48.0*r22*r22*r10*r12-12.0*r10*r21*r21*r12-32.0
			*r20*r22*r22*r22-12.0*r00*r02*r02*r02-12.0*r10*r12*r12*r12-36.0*r00*r20*r20*r02
			+24.0*r20*r20*r20*r22+24.0*r20*r21*r21*r22+9.0*r00*r02*r10*r10-36.0*r20*r22*r00
			*r00+3.0*r10*r01*r01*r12+48.0*r20*r22*r12*r12-12.0*r00*r21*r21*r02-12.0*r00*r02
			*r12*r12+9.0*r10*r11*r11*r12+9.0*r10*r00*r00*r12+3.0*r00*r02*r11*r11+9.0*r00*
			r00*r00*r02-12.0*r20*r22*r11*r11-12.0*r20*r22*r01*r01-12.0*r02*r02*r10*r12-36.0
			*r20*r22*r10*r10+9.0*r00*r01*r01*r02+48.0*r20*r22*r02*r02-36.0*r10*r20*r20*r12)*0.0071428571;
	
  t0 += -C41*(3.0*r00*r21*r21*r22+3.0*r02*r20*r21*r21+9.0*r00*r20*r20*r22
	      -12.0*r02*r20*r22*r22-4.0*r00*r22*r22*r22+3.0*r02*r20*r20*r20+6.0*r01*r20*r21*
	      r22)*0.25;
	
  t0 += C42*sqrt(2.0)*(4.0*r00*r22*r22*r02+2.0*r21*r22*r10*r11-2.0*r01*r20*r21*
		       r02+2.0*r11*r20*r21*r12-4.0*r22*r22*r10*r12+r10*r21*r21*r12-3.0*r00*r20*r20*r02
		       -3.0*r20*r22*r00*r00-4.0*r20*r22*r12*r12-r00*r21*r21*r02+3.0*r20*r22*r10*r10+
		       r20*r22*r11*r11-r20*r22*r01*r01+4.0*r20*r22*r02*r02+3.0*r10*r20*r20*r12-2.0*r21
		       *r22*r00*r01)*0.25;
	
  t0 += C43*sqrt(7.0)*(6.0*r02*r21*r10*r11-24.0*r02*r22*r10*r12+6.0*r01*r22*r10*
		       r11-6.0*r21*r00*r01*r02+3.0*r00*r22*r11*r11+4.0*r02*r02*r02*r20+9.0*r02*r20*r10
		       *r10-3.0*r00*r00*r00*r22+3.0*r02*r20*r11*r11+9.0*r00*r22*r10*r10+18.0*r00*r10*
		       r20*r12+6.0*r01*r10*r21*r12+6.0*r01*r11*r20*r12+6.0*r00*r11*r21*r12+12.0*r00*
		       r22*r02*r02-12.0*r00*r22*r12*r12-3.0*r20*r01*r01*r02-12.0*r02*r20*r12*r12-9.0*
		       r20*r00*r00*r02-3.0*r00*r22*r01*r01)*0.035714286;
	
  t0 += -C44*sqrt(2.0)*sqrt(7.0)*(3.0*r00*r01*r01*r02-3.0*r00*r02*r11*r11+3.0*
				  r00*r00*r00*r02+12.0*r02*r02*r10*r12+12.0*r00*r02*r12*r12+3.0*r10*r11*r11*r12
				  -9.0*r10*r00*r00*r12-4.0*r00*r02*r02*r02-4.0*r10*r12*r12*r12-3.0*r10*r01*r01*
				  r12+3.0*r10*r10*r10*r12-6.0*r11*r00*r01*r12-6.0*r01*r02*r10*r11-9.0*r00*r02*r10
				  *r10)*0.035714286;
	
  t0 += -C4m1*(-4.0*r10*r22*r22*r22-12.0*r12*r20*r22*r22+9.0*r10*r20*r20*r22
	       +3.0*r12*r20*r20*r20+6.0*r11*r20*r21*r22+3.0*r10*r21*r21*r22+3.0*r12*r20*r21*
	       r21)*0.25;
	
  t0 += -C4m2*sqrt(2.0)*(r00*r12*r21*r21+3.0*r02*r10*r20*r20-4.0*r00*r12*r22*r22+
			 3.0*r00*r12*r20*r20-4.0*r02*r10*r22*r22+2.0*r02*r11*r20*r21+2.0*r01*r11*r20*r22
			 +r02*r10*r21*r21+6.0*r00*r10*r20*r22+2.0*r01*r10*r21*r22+2.0*r01*r12*r20*r21
			 -8.0*r02*r12*r20*r22+2.0*r00*r11*r21*r22)*0.25;
	
  t0 += C4m3*sqrt(7.0)*(-6.0*r01*r11*r20*r02+9.0*r20*r10*r10*r12-9.0*r10*r22*r00*
			r00+3.0*r10*r22*r11*r11-12.0*r10*r22*r12*r12-3.0*r12*r20*r01*r01+3.0*r20*r11*
			r11*r12+12.0*r12*r20*r02*r02+12.0*r10*r22*r02*r02-6.0*r01*r10*r21*r02+24.0*r12*
			r22*r00*r02+3.0*r10*r10*r10*r22-4.0*r12*r12*r12*r20-9.0*r12*r20*r00*r00-6.0*r00
			*r11*r21*r02-6.0*r12*r21*r00*r01+6.0*r21*r10*r11*r12-3.0*r10*r22*r01*r01-6.0*
			r11*r22*r00*r01-18.0*r00*r10*r20*r02)*0.035714286;
	
  t0 += C4m4*sqrt(2.0)*sqrt(7.0)*(9.0*r00*r10*r10*r12+3.0*r02*r10*r10*r10-3.0*r00
				  *r00*r00*r12+4.0*r02*r02*r02*r10-4.0*r00*r12*r12*r12-9.0*r10*r00*r00*r02-6.0*
				  r11*r00*r01*r02+3.0*r00*r11*r11*r12+12.0*r00*r12*r02*r02+3.0*r02*r10*r11*r11
				  -12.0*r02*r10*r12*r12-3.0*r00*r12*r01*r01-3.0*r10*r01*r01*r02+6.0*r01*r10*r11*
				  r12)*0.035714286;
	
  pCOut[5] = t0; // Y41
	
		
  t0 = C40*sqrt(5.0)*(-24.0*r22*r22*r10*r10+6.0*r02*r02*r10*r10+48.0*r20*r20*
		      r22*r22-18.0*r01*r01*r02*r02+6.0*r01*r01*r11*r11-24.0*r21*r21*r01*r01-6.0*r02*
		      r02*r11*r11+18.0*r10*r10*r12*r12+24.0*r21*r21*r02*r02+24.0*r21*r21*r12*r12-18.0
		      *r11*r11*r12*r12+18.0*r00*r00*r02*r02-48.0*r21*r21*r22*r22+24.0*r22*r22*r01*r01
		      -24.0*r20*r20*r02*r02+6.0*r00*r00*r12*r12+24.0*r20*r20*r00*r00+24.0*r20*r20*r10
		      *r10-24.0*r21*r21*r11*r11-6.0*r01*r01*r12*r12-6.0*r00*r00*r10*r10-24.0*r22*r22*
		      r00*r00+24.0*r22*r22*r11*r11-24.0*r20*r20*r12*r12-96.0*r00*r20*r22*r02-24.0*r01
		      *r11*r02*r12-96.0*r10*r20*r22*r12-8.0*r20*r20*r20*r20-3.0*r00*r00*r00*r00+8.0*
		      r21*r21*r21*r21-3.0*r10*r10*r10*r10+3.0*r01*r01*r01*r01+3.0*r11*r11*r11*r11+
		      96.0*r11*r21*r22*r12+24.0*r00*r10*r02*r12+96.0*r01*r21*r22*r02)*0.0071428571;
		
  t0 += -C41*sqrt(2.0)*(-3.0*r02*r22*r20*r20+r00*r20*r20*r20+3.0*r02*r22*r21*r21-
			3.0*r00*r20*r22*r22-r01*r21*r21*r21+3.0*r01*r22*r22*r21)*0.5;
		
		
  t0 += -C42*(r22*r22*r10*r10-r21*r21*r01*r01+r21*r21*r02*r02-r21*r21*r12*
	      r12+r22*r22*r01*r01-r20*r20*r02*r02+r20*r20*r00*r00-r20*r20*r10*r10+r21*r21*r11
	      *r11-r22*r22*r00*r00-r22*r22*r11*r11+r20*r20*r12*r12-4.0*r00*r20*r22*r02+4.0*
	      r10*r20*r22*r12-4.0*r11*r21*r22*r12+4.0*r01*r21*r22*r02)*0.5;
		
  t0 += -C43*sqrt(14.0)*(-r01*r01*r01*r21+3.0*r00*r20*r12*r12-3.0*r00*r20*r10*
			 r10+3.0*r22*r01*r01*r02+6.0*r00*r10*r22*r12+6.0*r02*r10*r20*r12-3.0*r01*r21*r12
			 *r12-6.0*r01*r11*r22*r12-6.0*r02*r11*r21*r12+3.0*r01*r21*r11*r11-3.0*r22*r00*
			 r00*r02+3.0*r01*r21*r02*r02-3.0*r02*r02*r20*r00+r00*r00*r00*r20+3.0*r02*r22*r10
			 *r10-3.0*r02*r22*r11*r11)*0.071428571;
		
  t0 += C44*sqrt(7.0)*(-r10*r10*r10*r10+r01*r01*r01*r01+r11*r11*r11*r11-24.0*r00
		       *r10*r02*r12+24.0*r01*r11*r02*r12-6.0*r00*r00*r12*r12+6.0*r01*r01*r12*r12+6.0*
		       r00*r00*r10*r10+6.0*r02*r02*r11*r11+6.0*r10*r10*r12*r12-6.0*r11*r11*r12*r12+6.0
		       *r00*r00*r02*r02-6.0*r02*r02*r10*r10-6.0*r01*r01*r02*r02-6.0*r01*r01*r11*r11-
		       r00*r00*r00*r00)*0.035714286;
		
  t0 += C4m1*sqrt(2.0)*(3.0*r10*r22*r22*r20-r10*r20*r20*r20+3.0*r12*r22*r20*r20-
			3.0*r12*r21*r21*r22-3.0*r11*r21*r22*r22+r11*r21*r21*r21)*0.5;
		
  t0 += C4m2*(2.0*r00*r12*r20*r22-2.0*r02*r11*r21*r22-2.0*r01*r12*r21*r22+
	      2.0*r02*r10*r20*r22-r00*r10*r20*r20+r01*r11*r21*r21-r01*r11*r22*r22+r02*r12*r20
	      *r20-r02*r12*r21*r21+r00*r10*r22*r22);
		
  t0 += -C4m3*sqrt(14.0)*(3.0*r12*r12*r20*r10+3.0*r12*r22*r10*r10-3.0*r10*r20*r02
			  *r02-3.0*r12*r12*r21*r11-6.0*r00*r12*r20*r02+3.0*r11*r21*r02*r02+3.0*r12*r22*
			  r01*r01+6.0*r01*r11*r22*r02-6.0*r00*r10*r22*r02-3.0*r12*r22*r11*r11-3.0*r12*r22
			  *r00*r00+6.0*r01*r12*r21*r02+r11*r11*r11*r21-r10*r10*r10*r20+3.0*r10*r20*r00*
			  r00-3.0*r11*r21*r01*r01)*0.071428571;
		
  t0 += -C4m4*sqrt(7.0)*(r00*r00*r00*r10-3.0*r02*r12*r00*r00+r01*r11*r11*r11-3.0*
			 r01*r12*r12*r11-r01*r01*r01*r11+3.0*r02*r02*r11*r01-r00*r10*r10*r10+3.0*r12*r01
			 *r01*r02+3.0*r00*r12*r12*r10-3.0*r02*r02*r10*r00+3.0*r02*r10*r10*r12-3.0*r02*
			 r12*r11*r11)*0.14285714;
		
  pCOut[6] = t0; // Y42
		
		
  t0 = -C40*sqrt(70.0)*(-3.0*r00*r00*r00*r02-8.0*r20*r20*r20*r22-3.0*r10*
			r10*r10*r12-12.0*r20*r22*r11*r11-24.0*r21*r22*r10*r11-3.0*r10*r00*r00*r12+24.0*
			r20*r21*r21*r22+3.0*r00*r02*r11*r11+12.0*r20*r22*r00*r00-3.0*r00*r02*r10*r10+
			3.0*r10*r01*r01*r12-12.0*r00*r21*r21*r02+6.0*r01*r02*r10*r11+9.0*r00*r01*r01*
			r02+12.0*r00*r20*r20*r02-12.0*r10*r21*r21*r12+12.0*r20*r22*r10*r10-12.0*r20*r22
			*r01*r01+9.0*r10*r11*r11*r12-24.0*r21*r22*r00*r01-24.0*r01*r20*r21*r02+12.0*r10
			*r20*r20*r12+6.0*r11*r00*r01*r12-24.0*r11*r20*r21*r12)*0.0071428571;
		
  t0 += C41*sqrt(7.0)*(-6.0*r01*r20*r21*r22+r02*r20*r20*r20-3.0*r02*r20*r21*r21+
		       3.0*r00*r20*r20*r22-3.0*r00*r21*r21*r22)*0.25;
		
  t0 += C42*sqrt(14.0)*(r20*r22*r00*r00-r00*r21*r21*r02-2.0*r01*r20*r21*r02-2.0*
			r21*r22*r00*r01-r20*r22*r01*r01+r10*r21*r21*r12+r00*r20*r20*r02-r10*r20*r20*r12
			+2.0*r11*r20*r21*r12-r20*r22*r10*r10+2.0*r21*r22*r10*r11+r20*r22*r11*r11)*0.25;
		
  t0 += C43*(r00*r00*r00*r22+6.0*r01*r10*r21*r12+6.0*r00*r11*r21*r12-3.0*r20
	     *r01*r01*r02-3.0*r00*r22*r10*r10-3.0*r02*r20*r10*r10-3.0*r00*r22*r01*r01+3.0*
	     r20*r00*r00*r02+3.0*r00*r22*r11*r11+6.0*r01*r22*r10*r11-6.0*r21*r00*r01*r02-6.0
	     *r00*r10*r20*r12+6.0*r02*r21*r10*r11+3.0*r02*r20*r11*r11+6.0*r01*r11*r20*r12)*0.25;
		
  t0 += -C44*sqrt(2.0)*(-6.0*r01*r02*r10*r11-6.0*r11*r00*r01*r12-3.0*r10*r01*r01
			*r12+3.0*r00*r02*r10*r10-3.0*r00*r02*r11*r11+3.0*r10*r11*r11*r12+3.0*r00*r01*
			r01*r02+3.0*r10*r00*r00*r12-r00*r00*r00*r02-r10*r10*r10*r12)*0.25;
		
  t0 += -C4m1*sqrt(7.0)*(6.0*r11*r20*r21*r22+3.0*r12*r20*r21*r21+3.0*r10*r21*r21*
			 r22-r12*r20*r20*r20-3.0*r10*r20*r20*r22)*0.25;
		
		
  t0 += -C4m2*sqrt(14.0)*(2.0*r01*r12*r20*r21+2.0*r01*r11*r20*r22+r00*r12*r21*r21
			  +r02*r10*r21*r21+2.0*r00*r11*r21*r22+2.0*r01*r10*r21*r22+2.0*r02*r11*r20*r21-
			  r02*r10*r20*r20-r00*r12*r20*r20-2.0*r00*r10*r20*r22)*0.25;
		
  t0 += C4m3*(-r10*r10*r10*r22-6.0*r12*r21*r00*r01-6.0*r01*r11*r20*r02-3.0*
	      r12*r20*r01*r01+6.0*r00*r10*r20*r02-6.0*r01*r10*r21*r02-6.0*r00*r11*r21*r02-3.0
	      *r10*r22*r01*r01-6.0*r11*r22*r00*r01-3.0*r20*r10*r10*r12+3.0*r12*r20*r00*r00+
	      3.0*r10*r22*r11*r11+6.0*r21*r10*r11*r12+3.0*r10*r22*r00*r00+3.0*r20*r11*r11*r12)*0.25;
		
  t0 += C4m4*sqrt(2.0)*(3.0*r02*r10*r11*r11-3.0*r00*r10*r10*r12-3.0*r00*r12*r01*
			r01-r02*r10*r10*r10+r00*r00*r00*r12+6.0*r01*r10*r11*r12-6.0*r11*r00*r01*r02+3.0
			*r10*r00*r00*r02+3.0*r00*r11*r11*r12-3.0*r10*r01*r01*r02)*0.25;
		
  pCOut[7] = t0; // Y43
		
		
  t0 = C40*sqrt(35.0)*(3.0*r11*r11*r11*r11+3.0*r00*r00*r00*r00+3.0*r10*r10*
		       r10*r10+8.0*r21*r21*r21*r21+8.0*r20*r20*r20*r20+3.0*r01*r01*r01*r01+96.0*r00*
		       r20*r21*r01+96.0*r10*r20*r21*r11-24.0*r10*r00*r01*r11+24.0*r21*r21*r10*r10-24.0
		       *r21*r21*r01*r01-24.0*r21*r21*r11*r11+24.0*r20*r20*r01*r01-6.0*r01*r01*r10*r10
		       -18.0*r00*r00*r01*r01-6.0*r00*r00*r11*r11+24.0*r21*r21*r00*r00-48.0*r20*r20*r21
		       *r21-18.0*r10*r10*r11*r11+24.0*r20*r20*r11*r11-24.0*r20*r20*r00*r00-24.0*r20*
		       r20*r10*r10+6.0*r00*r00*r10*r10+6.0*r01*r01*r11*r11)*0.0035714286;
		
  t0 += C41*sqrt(7.0)*sqrt(2.0)*(-3.0*r00*r21*r21*r20-3.0*r01*r21*r20*r20+r00*
				 r20*r20*r20+r01*r21*r21*r21)*0.25;
		
  t0 += C42*sqrt(7.0)*(4.0*r10*r20*r21*r11-4.0*r00*r20*r21*r01+r21*r21*r01*r01-
		       r21*r21*r11*r11+r21*r21*r10*r10-r20*r20*r10*r10-r20*r20*r01*r01-r21*r21*r00*r00
		       +r20*r20*r11*r11+r20*r20*r00*r00)*0.25;
		
  t0 += C43*sqrt(2.0)*(3.0*r00*r20*r11*r11-3.0*r21*r00*r00*r01+6.0*r01*r10*r20*
		       r11+6.0*r00*r10*r21*r11-3.0*r01*r01*r20*r00+3.0*r01*r21*r10*r10-3.0*r00*r20*r10
		       *r10-3.0*r01*r21*r11*r11+r01*r01*r01*r21+r00*r00*r00*r20)*0.25;
		
  t0 += C44*(r01*r01*r01*r01+r11*r11*r11*r11+r00*r00*r00*r00+r10*r10*r10*r10
	     -6.0*r01*r01*r11*r11-6.0*r00*r00*r10*r10-6.0*r10*r10*r11*r11+6.0*r00*r00*r11*
	     r11-6.0*r00*r00*r01*r01+6.0*r01*r01*r10*r10+24.0*r10*r00*r01*r11)*0.125;
		
  t0 += -C4m1*sqrt(7.0)*sqrt(2.0)*(3.0*r11*r20*r20*r21+3.0*r10*r20*r21*r21-r10*
				   r20*r20*r20-r11*r21*r21*r21)*0.25;
		
  t0 += -C4m2*sqrt(7.0)*(2.0*r01*r10*r20*r21+2.0*r00*r11*r20*r21+r00*r10*r21*r21+
			 r01*r11*r20*r20-r00*r10*r20*r20-r01*r11*r21*r21)*0.5;
		
  t0 += -C4m3*sqrt(2.0)*(r10*r10*r10*r20+r11*r11*r11*r21+3.0*r10*r20*r01*r01+3.0*
			 r11*r21*r00*r00-3.0*r10*r20*r11*r11+6.0*r00*r11*r20*r01-3.0*r11*r21*r10*r10+6.0
			 *r00*r10*r21*r01-3.0*r11*r21*r01*r01-3.0*r10*r20*r00*r00)*0.25;
		
  t0 += -C4m4*(r00*r10*r10*r10-r00*r00*r00*r10-r01*r01*r01*r11+3.0*r01*r11*
	       r00*r00-3.0*r00*r11*r11*r10-3.0*r01*r10*r10*r11+3.0*r01*r01*r10*r00+r01*r11*r11
	       *r11)*0.5;
		
  pCOut[8] = t0; // Y44
		
		
  t0 = -C40*sqrt(10.0)*(9.0*r11*r11*r11*r12+24.0*r21*r21*r21*r22+9.0*r00*r00*
			r01*r02+9.0*r01*r01*r01*r02-32.0*r21*r22*r22*r22-12.0*r01*r02*r02*r02-24.0*r10*
			r20*r21*r12+6.0*r10*r00*r01*r12-24.0*r10*r20*r22*r11-24.0*r00*r20*r22*r01-12.0*
			r01*r02*r12*r12-12.0*r11*r20*r20*r12+24.0*r20*r20*r21*r22-12.0*r21*r22*r10*r10
			-12.0*r21*r22*r00*r00-36.0*r01*r21*r21*r02+3.0*r01*r02*r10*r10-12.0*r11*r12*r12
			*r12-12.0*r02*r02*r11*r12+48.0*r22*r22*r11*r12-36.0*r11*r21*r21*r12-36.0*r21*
			r22*r01*r01-36.0*r21*r22*r11*r11+48.0*r21*r22*r12*r12+48.0*r22*r22*r01*r02+48.0
			*r21*r22*r02*r02+9.0*r10*r10*r11*r12+9.0*r01*r02*r11*r11-12.0*r01*r20*r20*r02+
			6.0*r00*r10*r02*r11+3.0*r11*r00*r00*r12-24.0*r00*r20*r21*r02+9.0*r11*r01*r01*
			r12)*0.0071428571;
		
  t0 += -C41*(-4.0*r01*r22*r22*r22+6.0*r00*r20*r21*r22+3.0*r01*r20*r20*r22+
	      3.0*r02*r20*r20*r21+9.0*r01*r21*r21*r22+3.0*r02*r21*r21*r21-12.0*r02*r21*r22*
	      r22)*0.25;
		
  t0 += C42*sqrt(2.0)*(r21*r22*r10*r10+2.0*r10*r20*r22*r11+2.0*r10*r20*r21*r12+
		       r11*r20*r20*r12+4.0*r22*r22*r01*r02-4.0*r21*r22*r12*r12+3.0*r21*r22*r11*r11-3.0
		       *r21*r22*r01*r01+3.0*r11*r21*r21*r12-2.0*r00*r20*r21*r02-4.0*r22*r22*r11*r12
		       -3.0*r01*r21*r21*r02-2.0*r00*r20*r22*r01-r21*r22*r00*r00-r01*r20*r20*r02+4.0*
		       r21*r22*r02*r02)*0.25;
		
  t0 += C43*sqrt(7.0)*(-6.0*r20*r00*r01*r02+6.0*r00*r10*r21*r12-12.0*r01*r22*r12
		       *r12+9.0*r01*r22*r11*r11+6.0*r00*r10*r22*r11-3.0*r01*r01*r01*r22+6.0*r02*r10*
		       r20*r11-24.0*r02*r22*r11*r12+18.0*r01*r11*r21*r12+6.0*r00*r11*r20*r12+4.0*r02*
		       r02*r02*r21-12.0*r02*r21*r12*r12+6.0*r01*r10*r20*r12-9.0*r21*r01*r01*r02+3.0*
		       r02*r21*r10*r10+3.0*r01*r22*r10*r10-3.0*r21*r00*r00*r02-3.0*r22*r00*r00*r01+9.0
		       *r02*r21*r11*r11+12.0*r01*r22*r02*r02)*0.035714286;
		
  t0 += -C44*sqrt(2.0)*sqrt(7.0)*(-9.0*r11*r01*r01*r12-3.0*r11*r00*r00*r12-6.0*
				  r00*r10*r02*r11-9.0*r01*r02*r11*r11+3.0*r10*r10*r11*r12+12.0*r02*r02*r11*r12
				  -3.0*r01*r02*r10*r10-6.0*r10*r00*r01*r12-4.0*r11*r12*r12*r12-4.0*r01*r02*r02*
				  r02+12.0*r01*r02*r12*r12+3.0*r01*r01*r01*r02+3.0*r00*r00*r01*r02+3.0*r11*r11*
				  r11*r12)*0.035714286;
		
  t0 += -C4m1*(-4.0*r11*r22*r22*r22+3.0*r12*r20*r20*r21+9.0*r11*r21*r21*r22+
	       3.0*r11*r20*r20*r22+6.0*r20*r10*r21*r22-12.0*r12*r21*r22*r22+3.0*r12*r21*r21*
	       r21)*0.25;
		
  t0 += -C4m2*sqrt(2.0)*(3.0*r01*r12*r21*r21+2.0*r00*r10*r21*r22+2.0*r01*r10*r20*
			 r22+2.0*r02*r10*r20*r21+2.0*r00*r11*r20*r22+2.0*r00*r12*r20*r21+3.0*r02*r11*r21
			 *r21+r01*r12*r20*r20+6.0*r01*r11*r21*r22-4.0*r02*r11*r22*r22-8.0*r02*r12*r21*
			 r22-4.0*r01*r12*r22*r22+r02*r11*r20*r20)*0.25;
		
  t0 += C4m3*sqrt(7.0)*(-6.0*r01*r10*r20*r02-6.0*r00*r10*r21*r02+3.0*r22*r10*r10*
			r11+12.0*r12*r21*r02*r02-9.0*r12*r21*r01*r01+9.0*r21*r11*r11*r12-12.0*r11*r22*
			r12*r12-6.0*r00*r10*r22*r01-3.0*r12*r21*r00*r00+3.0*r21*r10*r10*r12-4.0*r12*r12
			*r12*r21-3.0*r11*r22*r00*r00+3.0*r11*r11*r11*r22+12.0*r11*r22*r02*r02+6.0*r20*
			r10*r11*r12-9.0*r11*r22*r01*r01+24.0*r12*r22*r01*r02-6.0*r00*r12*r20*r01-18.0*
			r01*r11*r21*r02-6.0*r00*r11*r20*r02)*0.035714286;
		
  t0 += C4m4*sqrt(2.0)*sqrt(7.0)*(-9.0*r11*r01*r01*r02+9.0*r01*r11*r11*r12-6.0*
				  r10*r00*r01*r02+12.0*r01*r12*r02*r02-12.0*r02*r11*r12*r12+4.0*r02*r02*r02*r11
				  -3.0*r12*r00*r00*r01+3.0*r01*r10*r10*r12+3.0*r02*r11*r11*r11-4.0*r01*r12*r12*
				  r12+6.0*r00*r10*r11*r12-3.0*r11*r00*r00*r02-3.0*r01*r01*r01*r12+3.0*r02*r10*r10
				  *r11)*0.035714286;
		
  pCOut[3] = t0; // Y4m1
		
		
  t0 = -C40*sqrt(5.0)*(3.0*r00*r01*r01*r01-12.0*r21*r21*r10*r11+48.0*r20*r22*
		       r11*r12-12.0*r20*r21*r11*r11+3.0*r10*r10*r10*r11+3.0*r10*r11*r11*r11+8.0*r20*
		       r20*r20*r21+8.0*r20*r21*r21*r21+3.0*r00*r00*r00*r01+48.0*r21*r22*r00*r02+48.0*
		       r20*r22*r01*r02+3.0*r00*r01*r11*r11-12.0*r00*r02*r11*r12+3.0*r01*r01*r10*r11
		       -6.0*r00*r01*r12*r12+3.0*r00*r01*r10*r10+24.0*r00*r22*r22*r01-48.0*r20*r21*r22*
		       r22-12.0*r20*r21*r01*r01-12.0*r20*r21*r10*r10+24.0*r22*r22*r10*r11-12.0*r00*r20
		       *r20*r01+24.0*r20*r21*r02*r02-6.0*r02*r02*r10*r11-12.0*r20*r21*r00*r00-18.0*r10
		       *r11*r12*r12-12.0*r20*r20*r10*r11+24.0*r20*r21*r12*r12+48.0*r21*r22*r10*r12
		       -12.0*r00*r21*r21*r01-18.0*r00*r01*r02*r02-12.0*r01*r02*r10*r12+3.0*r00*r00*r10
		       *r11)*0.014285714;
		
  t0 += -C41*sqrt(2.0)*(r00*r21*r21*r21-12.0*r02*r20*r21*r22+r01*r20*r20*r20-6.0*
			r01*r20*r22*r22-6.0*r00*r21*r22*r22+3.0*r01*r20*r21*r21+3.0*r00*r20*r20*r21)*0.25;
		
		
  t0 += C42*(r21*r21*r10*r11-4.0*r20*r22*r11*r12+r20*r21*r11*r11+4.0*r21*r22
	     *r00*r02+4.0*r20*r22*r01*r02+2.0*r00*r22*r22*r01-r20*r21*r01*r01+r20*r21*r10*
	     r10-2.0*r22*r22*r10*r11-r00*r20*r20*r01+2.0*r20*r21*r02*r02-r20*r21*r00*r00+r20
	     *r20*r10*r11-2.0*r20*r21*r12*r12-4.0*r21*r22*r10*r12-r00*r21*r21*r01)*0.5;
		
  t0 += C43*sqrt(14.0)*(-12.0*r00*r22*r11*r12-r00*r00*r00*r21+6.0*r01*r21*r10*
			r11-12.0*r02*r20*r11*r12+3.0*r01*r20*r10*r10+3.0*r00*r21*r10*r10+6.0*r01*r20*
			r02*r02+6.0*r00*r21*r02*r02+3.0*r01*r20*r11*r11-3.0*r00*r00*r20*r01-12.0*r02*
			r22*r10*r11+3.0*r00*r21*r11*r11+12.0*r00*r22*r01*r02-r01*r01*r01*r20+6.0*r00*
			r20*r10*r11-12.0*r01*r22*r10*r12-3.0*r00*r21*r01*r01-6.0*r00*r21*r12*r12-6.0*
			r01*r20*r12*r12-12.0*r02*r21*r10*r12)*0.035714286;
		
  t0 += -C44*sqrt(7.0)*(-3.0*r01*r01*r10*r11+r00*r01*r01*r01+r00*r00*r00*r01+
			12.0*r00*r02*r11*r12+6.0*r00*r01*r12*r12+12.0*r01*r02*r10*r12+r10*r10*r10*r11+
			6.0*r02*r02*r10*r11-3.0*r00*r01*r10*r10-6.0*r00*r01*r02*r02-6.0*r10*r11*r12*r12
			-3.0*r00*r00*r10*r11-3.0*r00*r01*r11*r11+r10*r11*r11*r11)*0.071428571;
		
  t0 += -C4m1*sqrt(2.0)*(3.0*r11*r20*r21*r21+r11*r20*r20*r20+3.0*r10*r20*r20*r21+
			 r10*r21*r21*r21-6.0*r10*r21*r22*r22-6.0*r11*r20*r22*r22-12.0*r12*r20*r21*r22)*0.25;
		
  t0 += -C4m2*(r01*r10*r20*r20+r01*r10*r21*r21-2.0*r00*r11*r22*r22-2.0*r01*
	       r10*r22*r22+r00*r11*r20*r20+2.0*r01*r11*r20*r21+r00*r11*r21*r21-4.0*r02*r10*r21
	       *r22-4.0*r00*r12*r21*r22-4.0*r02*r11*r20*r22-4.0*r02*r12*r20*r21+2.0*r00*r10*
	       r20*r21-4.0*r01*r12*r20*r22)*0.5;
		
  t0 += C4m3*sqrt(14.0)*(-3.0*r10*r21*r00*r00-3.0*r11*r20*r01*r01-3.0*r10*r21*r01
			 *r01-3.0*r11*r20*r00*r00-6.0*r10*r21*r12*r12-6.0*r11*r20*r12*r12-12.0*r10*r22*
			 r11*r12+12.0*r12*r20*r01*r02+12.0*r12*r22*r00*r01+12.0*r12*r21*r00*r02-6.0*r11*
			 r21*r00*r01+12.0*r11*r22*r00*r02+3.0*r10*r10*r20*r11+12.0*r10*r22*r01*r02+3.0*
			 r10*r21*r11*r11+6.0*r11*r20*r02*r02+6.0*r10*r21*r02*r02-6.0*r10*r20*r00*r01+r11
			 *r11*r11*r20+r10*r10*r10*r21)*0.035714286;
		
  t0 += C4m4*sqrt(7.0)*(-3.0*r00*r00*r10*r01+3.0*r01*r10*r11*r11-3.0*r00*r11*r01*
			r01+6.0*r01*r10*r02*r02-12.0*r02*r10*r11*r12-r01*r01*r01*r10-6.0*r00*r11*r12*
			r12+r00*r11*r11*r11-6.0*r01*r10*r12*r12-r00*r00*r00*r11+r01*r10*r10*r10+12.0*
			r00*r12*r01*r02+6.0*r00*r11*r02*r02+3.0*r00*r10*r10*r11)*0.071428571;
		
  pCOut[2] = t0; // Y4m2
		
		
  t0 = -C40*sqrt(70.0)*(-12.0*r21*r22*r01*r01-12.0*r21*r22*r11*r11+24.0*r10
			*r20*r21*r12+3.0*r01*r01*r01*r02+12.0*r21*r22*r10*r10+12.0*r21*r22*r00*r00-3.0*
			r11*r00*r00*r12-9.0*r00*r00*r01*r02+12.0*r01*r20*r20*r02+8.0*r21*r21*r21*r22
			-6.0*r10*r00*r01*r12+12.0*r11*r20*r20*r12-3.0*r01*r02*r10*r10+3.0*r11*r01*r01*
			r12+24.0*r00*r20*r21*r02-12.0*r01*r21*r21*r02+3.0*r11*r11*r11*r12+24.0*r00*r20*
			r22*r01+24.0*r10*r20*r22*r11-6.0*r00*r10*r02*r11-24.0*r20*r20*r21*r22-12.0*r11*
			r21*r21*r12-9.0*r10*r10*r11*r12+3.0*r01*r02*r11*r11)*0.0071428571;
		
  t0 += C41*sqrt(7.0)*(-r02*r21*r21*r21+6.0*r00*r20*r21*r22+3.0*r01*r20*r20*r22+
		       3.0*r02*r20*r20*r21-3.0*r01*r21*r21*r22)*0.25;
		
  t0 += C42*sqrt(14.0)*(2.0*r00*r20*r22*r01+r11*r21*r21*r12-2.0*r10*r20*r22*r11-
			r21*r22*r10*r10+2.0*r00*r20*r21*r02+r21*r22*r00*r00+r01*r20*r20*r02-2.0*r10*r20
			*r21*r12-r01*r21*r21*r02-r11*r20*r20*r12-r21*r22*r01*r01+r21*r22*r11*r11)*0.25;
		
  t0 += C43*(-3.0*r02*r21*r10*r10-6.0*r00*r10*r21*r12+6.0*r20*r00*r01*r02
	     -6.0*r00*r10*r22*r11-6.0*r00*r11*r20*r12-3.0*r01*r22*r10*r10-6.0*r01*r10*r20*
	     r12-r01*r01*r01*r22+3.0*r02*r21*r11*r11+3.0*r22*r00*r00*r01-3.0*r21*r01*r01*r02
	     +3.0*r21*r00*r00*r02+6.0*r01*r11*r21*r12-6.0*r02*r10*r20*r11+3.0*r01*r22*r11*
	     r11)*0.25;
		
  t0 += -C44*sqrt(2.0)*(-3.0*r01*r02*r11*r11+3.0*r11*r00*r00*r12+r11*r11*r11*r12
			+6.0*r10*r00*r01*r12+r01*r01*r01*r02-3.0*r11*r01*r01*r12+3.0*r01*r02*r10*r10
			-3.0*r00*r00*r01*r02-3.0*r10*r10*r11*r12+6.0*r00*r10*r02*r11)*0.25;
		
  t0 += C4m1*sqrt(7.0)*(-3.0*r11*r21*r21*r22+3.0*r12*r20*r20*r21+3.0*r11*r20*r20*
			r22-r12*r21*r21*r21+6.0*r20*r10*r21*r22)*0.25;
		
  t0 += C4m2*sqrt(14.0)*(2.0*r00*r12*r20*r21-2.0*r01*r11*r21*r22+r01*r12*r20*r20+
			 r02*r11*r20*r20+2.0*r02*r10*r20*r21+2.0*r01*r10*r20*r22+2.0*r00*r11*r20*r22-r01
			 *r12*r21*r21+2.0*r00*r10*r21*r22-r02*r11*r21*r21)*0.25;
		
  t0 += C4m3*(r11*r11*r11*r22-3.0*r21*r10*r10*r12+3.0*r21*r11*r11*r12-6.0*
	      r01*r11*r21*r02-3.0*r22*r10*r10*r11+6.0*r01*r10*r20*r02+6.0*r00*r11*r20*r02-3.0
	      *r11*r22*r01*r01-6.0*r20*r10*r11*r12+6.0*r00*r10*r22*r01+6.0*r00*r12*r20*r01+
	      3.0*r12*r21*r00*r00+3.0*r11*r22*r00*r00-3.0*r12*r21*r01*r01+6.0*r00*r10*r21*r02
	      )*0.25;
		
  t0 += C4m4*sqrt(2.0)*(-r01*r01*r01*r12+r02*r11*r11*r11+6.0*r10*r00*r01*r02-6.0*
			r00*r10*r11*r12+3.0*r11*r00*r00*r02+3.0*r01*r11*r11*r12-3.0*r02*r10*r10*r11+3.0
			*r12*r00*r00*r01-3.0*r11*r01*r01*r02-3.0*r01*r10*r10*r12)*0.25;
		
  pCOut[1] = t0; // Y4m3
		
		
  t0 = -C40*sqrt(35.0)*(-3.0*r00*r01*r10*r10-12.0*r20*r21*r11*r11-12.0*r00*
			r21*r21*r01+3.0*r01*r01*r10*r11+3.0*r00*r01*r11*r11+12.0*r20*r21*r00*r00-12.0*
			r21*r21*r10*r11+12.0*r00*r20*r20*r01+12.0*r20*r21*r10*r10-3.0*r00*r00*r10*r11+
			12.0*r20*r20*r10*r11-12.0*r20*r21*r01*r01+8.0*r20*r21*r21*r21+3.0*r10*r11*r11*
			r11-3.0*r10*r10*r10*r11-8.0*r20*r20*r20*r21-3.0*r00*r00*r00*r01+3.0*r00*r01*r01
			*r01)*0.014285714;
		
  t0 += C41*sqrt(7.0)*sqrt(2.0)*(3.0*r00*r20*r20*r21-3.0*r01*r20*r21*r21-r00*r21*
				 r21*r21+r01*r20*r20*r20)*0.25;
		
  t0 += C42*sqrt(7.0)*(-r20*r21*r01*r01-r20*r20*r10*r11-r20*r21*r10*r10+r00*r20*
		       r20*r01+r21*r21*r10*r11+r20*r21*r00*r00-r00*r21*r21*r01+r20*r21*r11*r11)*0.5;
		
  t0 += C43*sqrt(2.0)*(-r01*r01*r01*r20-6.0*r00*r20*r10*r11+3.0*r00*r21*r11*r11+
		       6.0*r01*r21*r10*r11-3.0*r00*r21*r10*r10+r00*r00*r00*r21-3.0*r01*r20*r10*r10+3.0
		       *r00*r00*r20*r01+3.0*r01*r20*r11*r11-3.0*r00*r21*r01*r01)*0.25;
		
  t0 += -C44*(-r00*r00*r00*r01+r00*r01*r01*r01-r10*r10*r10*r11+r10*r11*r11*
	      r11+3.0*r00*r00*r10*r11-3.0*r00*r01*r11*r11-3.0*r01*r01*r10*r11+3.0*r00*r01*r10
	      *r10)*0.5;
		
  t0 += C4m1*sqrt(7.0)*sqrt(2.0)*(-r10*r21*r21*r21+r11*r20*r20*r20-3.0*r11*r20*r21*
				  r21+3.0*r10*r20*r20*r21)*0.25;
		
  t0 += C4m2*sqrt(7.0)*(r00*r11*r20*r20-r00*r11*r21*r21-r01*r10*r21*r21+r01*r10*
			r20*r20+2.0*r00*r10*r20*r21-2.0*r01*r11*r20*r21)*0.5;
		
  t0 += C4m3*sqrt(2.0)*(-3.0*r11*r20*r01*r01+3.0*r11*r20*r00*r00+6.0*r10*r20*r00*
			r01+3.0*r10*r21*r11*r11-r10*r10*r10*r21+3.0*r10*r21*r00*r00-6.0*r11*r21*r00*r01
			-3.0*r10*r10*r20*r11+r11*r11*r11*r20-3.0*r10*r21*r01*r01)*0.25;
		
  t0 += C4m4*(-r01*r01*r01*r10-r01*r10*r10*r10+r00*r11*r11*r11+r00*r00*r00*
	      r11+3.0*r00*r00*r10*r01-3.0*r00*r10*r10*r11-3.0*r00*r11*r01*r01+3.0*r01*r10*r11
	      *r11)*0.5;
		
  pCOut[0] = t0; // Y4m4

}


void 
SimpleSphericalHarmonics::rotate( const Matrix4f &rot ) 
{
//    Vec3f *rotcoeff = new Vec3f[numBasis];
  Vec3f rotcoeff[25];
	
  Vec4f tmp;
  tmp = rot[0];
  const float rot0[4] = { tmp[0], tmp[1], tmp[2], tmp[3] };

  tmp = rot[1];
  const float rot1[4] = { tmp[0], tmp[1], tmp[2], tmp[3] };
  
  tmp = rot[2];
  const float rot2[4] = { tmp[0], tmp[1], tmp[2], tmp[3] };
	
  if( Lmax >= 0 ) rotcoeff[0] = coefficients[0];
  if( Lmax >= 1 ) RotateLinear( &coefficients[1], &rotcoeff[1], rot0, rot1, rot2 );
  if( Lmax >= 2 ) RotateQuadratic( &coefficients[4], &rotcoeff[4], rot0, rot1, rot2 );
  if( Lmax >= 3 ) RotateCubic( &coefficients[9], &rotcoeff[9], rot0, rot1, rot2 );
  if( Lmax >= 4 ) RotateQuartic( &coefficients[16], &rotcoeff[16], rot0, rot1, rot2 );

//    delete[] coefficients;
//    coefficients = rotcoeff;
  for ( int i=0; i < 25; i++ ){ coefficients[i] = rotcoeff[i]; }
}

