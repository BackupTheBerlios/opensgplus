/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class NDFMaterial
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGNDFMATERIALBASE_H_
#define _OSGNDFMATERIALBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OSGConfig.h>
//#include <OSGSystemDef.h>
#include <OSGMyDef.h>

#include <OSGBaseTypes.h>

#include <OSGChunkMaterial.h> // Parent

#include <OSGColor3fFields.h> // Ambient type
#include <OSGColor3fFields.h> // Diffuse type
#include <OSGColor3fFields.h> // Specular type
#include <OSGReal32Fields.h>  // Ka type
#include <OSGReal32Fields.h>  // Kd type
#include <OSGReal32Fields.h>  // Ks type
#include <OSGColor3fFields.h> // Emission type
#include <OSGColor3fFields.h> // Fresnel type
#include <OSGReal32Fields.h>  // Transparency type
#include <OSGBoolFields.h>    // FresnelTerm type
#include <OSGBoolFields.h>    // SelfShadowingTerm type
#include <OSGBoolFields.h>    // CorrectCosine type
#include <OSGImageFields.h>   // DiffuseImage type
#include <OSGImageFields.h>   // NDFImage type
#include <OSGPnt3fFields.h>   // LightPos type
#include <OSGColor3fFields.h> // LightSpecular type
#include <OSGBoolFields.h>    // OnlyDiffuse type
#include <OSGUInt8Fields.h>   // UseFragProgOrRegComb

#include "OSGNDFMaterialFields.h"

OSG_BEGIN_NAMESPACE

class NDFMaterial;
class BinaryDataHandler;

//! \brief NDFMaterial Base Class.

class OSG_SYSTEMLIB_DLLMAPPING NDFMaterialBase : public ChunkMaterial
{
  private:

    typedef ChunkMaterial Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    enum
    {
        AmbientFieldId           = Inherited::NextFieldId,
        DiffuseFieldId           = AmbientFieldId           + 1,
        SpecularFieldId          = DiffuseFieldId           + 1,
        KaFieldId                = SpecularFieldId          + 1,
        KdFieldId                = KaFieldId                + 1,
        KsFieldId                = KdFieldId                + 1,
        EmissionFieldId          = KsFieldId                + 1,
        FresnelFieldId           = EmissionFieldId          + 1,
        TransparencyFieldId      = FresnelFieldId           + 1,
        FresnelTermFieldId       = TransparencyFieldId      + 1,
        SelfShadowingTermFieldId = FresnelTermFieldId       + 1,
        CorrectCosineFieldId     = SelfShadowingTermFieldId + 1,
        DiffuseImageFieldId      = CorrectCosineFieldId     + 1,
        NDFImageFieldId          = DiffuseImageFieldId      + 1,
        LightPosFieldId          = NDFImageFieldId          + 1,
        LightSpecularFieldId     = LightPosFieldId          + 1,
        OnlyDiffuseFieldId       = LightSpecularFieldId     + 1,
	UseFPorRCFieldId         = OnlyDiffuseFieldId       + 1,
        NextFieldId              = UseFPorRCFieldId         + 1
    };

    static const OSG::BitVector AmbientFieldMask;
    static const OSG::BitVector DiffuseFieldMask;
    static const OSG::BitVector SpecularFieldMask;
    static const OSG::BitVector KaFieldMask;
    static const OSG::BitVector KdFieldMask;
    static const OSG::BitVector KsFieldMask;
    static const OSG::BitVector EmissionFieldMask;
    static const OSG::BitVector FresnelFieldMask;
    static const OSG::BitVector TransparencyFieldMask;
    static const OSG::BitVector FresnelTermFieldMask;
    static const OSG::BitVector SelfShadowingTermFieldMask;
    static const OSG::BitVector CorrectCosineFieldMask;
    static const OSG::BitVector DiffuseImageFieldMask;
    static const OSG::BitVector NDFImageFieldMask;
    static const OSG::BitVector LightPosFieldMask;
    static const OSG::BitVector LightSpecularFieldMask;
    static const OSG::BitVector OnlyDiffuseFieldMask;
    static const OSG::BitVector UseFPorRCFieldMask;

    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFColor3f           *getSFAmbient        (void);
           SFColor3f           *getSFDiffuse        (void);
           SFColor3f           *getSFSpecular       (void);
           SFReal32            *getSFKa             (void);
           SFReal32            *getSFKd             (void);
           SFReal32            *getSFKs             (void);
           SFColor3f           *getSFEmission       (void);
           SFColor3f           *getSFFresnel        (void);
           SFReal32            *getSFTransparency   (void);
           SFBool              *getSFFresnelTerm    (void);
           SFBool              *getSFSelfShadowingTerm(void);
           SFBool              *getSFCorrectCosine  (void);
           SFImagePtr          *getSFDiffuseImage   (void);
           SFImagePtr          *getSFNDFImage       (void);
           SFPnt3f             *getSFLightPos       (void);
           SFColor3f           *getSFLightSpecular  (void);
           SFBool              *getSFOnlyDiffuse(void);
           SFUInt8             *getSFUseFPorRC(void);

           Color3f             &getAmbient        (void);
     const Color3f             &getAmbient        (void) const;
           Color3f             &getDiffuse        (void);
     const Color3f             &getDiffuse        (void) const;
           Color3f             &getSpecular       (void);
     const Color3f             &getSpecular       (void) const;
           Real32              &getKa             (void);
     const Real32              &getKa             (void) const;
           Real32              &getKd             (void);
     const Real32              &getKd             (void) const;
           Real32              &getKs             (void);
     const Real32              &getKs             (void) const;
           Color3f             &getEmission       (void);
     const Color3f             &getEmission       (void) const;
           Color3f             &getFresnel        (void);
     const Color3f             &getFresnel        (void) const;
           Real32              &getTransparency   (void);
     const Real32              &getTransparency   (void) const;
           bool                &getFresnelTerm    (void);
     const bool                &getFresnelTerm    (void) const;
           bool                &getSelfShadowingTerm(void);
     const bool                &getSelfShadowingTerm(void) const;
           bool                &getCorrectCosine  (void);
     const bool                &getCorrectCosine  (void) const;
           ImagePtr            &getDiffuseImage   (void);
     const ImagePtr            &getDiffuseImage   (void) const;
           ImagePtr            &getNDFImage       (void);
     const ImagePtr            &getNDFImage       (void) const;
           Pnt3f               &getLightPos       (void);
     const Pnt3f               &getLightPos       (void) const;
           Color3f             &getLightSpecular  (void);
     const Color3f             &getLightSpecular  (void) const;
           bool                &getOnlyDiffuse(void);
     const bool                &getOnlyDiffuse(void) const;
           UInt8               &getUseFPorRC(void);
     const UInt8               &getUseFPorRC(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setAmbient        ( const Color3f &value );
     void setDiffuse        ( const Color3f &value );
     void setSpecular       ( const Color3f &value );
     void setKa             ( const Real32 &value );
     void setKd             ( const Real32 &value );
     void setKs             ( const Real32 &value );
     void setEmission       ( const Color3f &value );
     void setFresnel        ( const Color3f &value );
     void setTransparency   ( const Real32 &value );
     void setFresnelTerm    ( const bool &value );
     void setSelfShadowingTerm( const bool &value );
     void setCorrectCosine  ( const bool &value );
     void setDiffuseImage   ( const ImagePtr &value );
     void setNDFImage       ( const ImagePtr &value );
     void setLightPos       ( const Pnt3f &value );
     void setLightSpecular  ( const Color3f &value );
     void setOnlyDiffuse ( const bool &value );
     void setUseFPorRC   ( const UInt8 &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  NDFMaterialPtr      create          (void); 
    static  NDFMaterialPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFColor3f           _sfAmbient;            // Ambient Material color
    SFColor3f           _sfDiffuse;            // Diffuse Material color
    SFColor3f           _sfSpecular;           // Specular Material Color
    SFReal32            _sfKa;                 // Coeffcient of ambient part
    SFReal32            _sfKd;                 // Coeffcient of diffuse part
    SFReal32            _sfKs;                 // Coeffcient of specular part
    SFColor3f           _sfEmission;           // Specular Material Color
    SFColor3f           _sfFresnel;            // Fresnel Material Color
    SFReal32            _sfTransparency;       // Transparency
    SFBool              _sfFresnelTerm;        // Use FresnelTerm?
    SFBool              _sfSelfShadowingTerm;  // Use SelfShadowingTerm(Torrance-Sparrow)?
    SFBool              _sfCorrectCosine;      // Use Correct Cosine?
    SFImagePtr          _sfDiffuseImage;       // DiffuseTexture object
    SFImagePtr          _sfNDFImage;           // NDFtexture object
    SFPnt3f             _sfLightPos;           // Position of the light source
    SFColor3f           _sfLightSpecular;      // Specular Light Color
    SFBool              _sfOnlyDiffuse;        // Show only diffuse material?
    SFUInt8             _sfUseFPorRC;          // Use Fragment Program or Register Combiners?

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    NDFMaterialBase(void);
    NDFMaterialBase(const NDFMaterialBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~NDFMaterialBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    void executeSyncImpl(      NDFMaterialBase *pOther,
                         const BitVector         &whichField);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const NDFMaterialBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef NDFMaterialBase *NDFMaterialBaseP;

OSG_END_NAMESPACE

#define OSGNDFMATERIALBASE_HEADER_CVSID "@(#)$Id: OSGNDFMaterialBase.h,v 1.1 2003/05/19 12:04:39 jnkautz Exp $"

#endif /* _OSGNDFMATERIALBASE_H_ */
