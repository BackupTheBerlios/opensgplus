/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class NDFMaterial!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILENDFMATERIALINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGNDFMaterialBase.h"
#include "OSGNDFMaterial.h"


OSG_USING_NAMESPACE

const OSG::BitVector  NDFMaterialBase::AmbientFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::AmbientFieldId);

const OSG::BitVector  NDFMaterialBase::DiffuseFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::DiffuseFieldId);

const OSG::BitVector  NDFMaterialBase::SpecularFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::SpecularFieldId);

const OSG::BitVector  NDFMaterialBase::KaFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::KaFieldId);

const OSG::BitVector  NDFMaterialBase::KdFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::KdFieldId);

const OSG::BitVector  NDFMaterialBase::KsFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::KsFieldId);

const OSG::BitVector  NDFMaterialBase::EmissionFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::EmissionFieldId);

const OSG::BitVector  NDFMaterialBase::FresnelFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::FresnelFieldId);

const OSG::BitVector  NDFMaterialBase::TransparencyFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::TransparencyFieldId);

const OSG::BitVector  NDFMaterialBase::FresnelTermFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::FresnelTermFieldId);

const OSG::BitVector  NDFMaterialBase::SelfShadowingTermFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::SelfShadowingTermFieldId);

const OSG::BitVector  NDFMaterialBase::CorrectCosineFieldMask =
    (TypeTraits<BitVector>::One << NDFMaterialBase::CorrectCosineFieldId);

const OSG::BitVector  NDFMaterialBase::DiffuseImageFieldMask =
    (TypeTraits<BitVector>::One << NDFMaterialBase::DiffuseImageFieldId);

const OSG::BitVector  NDFMaterialBase::NDFImageFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::NDFImageFieldId);

const OSG::BitVector  NDFMaterialBase::LightPosFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::LightPosFieldId);

const OSG::BitVector  NDFMaterialBase::LightSpecularFieldMask = 
    (TypeTraits<BitVector>::One << NDFMaterialBase::LightSpecularFieldId);

const OSG::BitVector NDFMaterialBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 

const OSG::BitVector  NDFMaterialBase::OnlyDiffuseFieldMask =
    (TypeTraits<BitVector>::One << NDFMaterialBase::OnlyDiffuseFieldId);

const OSG::BitVector  NDFMaterialBase::UseFPorRCFieldMask =
    (TypeTraits<BitVector>::One << NDFMaterialBase::UseFPorRCFieldId);

// Field descriptions

/*! \var Color3f         NDFMaterialBase::_sfAmbient
    
*/
/*! \var Color3f         NDFMaterialBase::_sfDiffuse
    
*/
/*! \var Color3f         NDFMaterialBase::_sfSpecular
    
*/
/*! \var Real32          NDFMaterialBase::_sfKa
    Material ambient coefficient
*/
/*! \var Real32          NDFMaterialBase::_sfKd
    Material diffuse coefficient
*/
/*! \var Real32          NDFMaterialBase::_sfKs
    Material specular coefficient
*/
/*! \var Color3f         NDFMaterialBase::_sfEmission
    
*/
/*! \var Color3f         NDFMaterialBase::_sfFresnel
    
*/
/*! \var Real32          NDFMaterialBase::_sfTransparency
    
*/
/*! \var bool            NDFMaterialBase::_sfFresnelTerm
    Use Fresnel approach?
*/
/*! \var bool            NDFMaterialBase::_sfSelfShadowingTerm
    Use SelfShadowing?
*/
/*! \var bool            NDFMaterialBase::_sfCorrectCosine
    Use correct cosine?
*/
/*! \var ImagePtr        NDFMaterialBase::_sfDiffuseImage
    The pointer for the diffuse texture
*/
/*! \var ImagePtr        NDFMaterialBase::_sfNDFImage
    The pointer for the NDF image
*/
/*! \var Pnt3f           NDFMaterialBase::_sfLightPos
    position of light source
*/
/*! \var Color3f         NDFMaterialBase::_sfLightSpecular
    Specular component of the light
*/
/*! \var bool            NDFMaterialBase::_sfOnlyDiffuse
    Show only the diffuse material?
*/
/*! \var UInt8           NDFMaterialBase::_sfUseFPorRC
    Use fragment program or register combiners?
*/

//! NDFMaterial description

FieldDescription *NDFMaterialBase::_desc[] = 
{
    new FieldDescription(SFColor3f::getClassType(), 
                     "ambient", 
                     AmbientFieldId, AmbientFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFAmbient),
    new FieldDescription(SFColor3f::getClassType(), 
                     "diffuse", 
                     DiffuseFieldId, DiffuseFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFDiffuse),
    new FieldDescription(SFColor3f::getClassType(), 
                     "specular", 
                     SpecularFieldId, SpecularFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFSpecular),
    new FieldDescription(SFReal32::getClassType(), 
                     "Ka", 
                     KaFieldId, KaFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFKa),
    new FieldDescription(SFReal32::getClassType(), 
                     "Kd", 
                     KdFieldId, KdFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFKd),
    new FieldDescription(SFReal32::getClassType(), 
                     "Ks", 
                     KsFieldId, KsFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFKs),
    new FieldDescription(SFColor3f::getClassType(), 
                     "emission", 
                     EmissionFieldId, EmissionFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFEmission),
    new FieldDescription(SFColor3f::getClassType(), 
                     "Fresnel", 
                     FresnelFieldId, FresnelFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFFresnel),
    new FieldDescription(SFReal32::getClassType(), 
                     "transparency", 
                     TransparencyFieldId, TransparencyFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFTransparency),
    new FieldDescription(SFBool::getClassType(), 
                     "FresnelTerm", 
                     FresnelTermFieldId, FresnelTermFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFFresnelTerm),
    new FieldDescription(SFBool::getClassType(), 
                     "SelfShadowingTerm", 
                     SelfShadowingTermFieldId, SelfShadowingTermFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFSelfShadowingTerm),
    new FieldDescription(SFBool::getClassType(),
                     "CorrectCosine",
                     CorrectCosineFieldId, CorrectCosineFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFCorrectCosine),
    new FieldDescription(SFImagePtr::getClassType(),
                     "DiffuseImage",
                     DiffuseImageFieldId, DiffuseImageFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFDiffuseImage),
    new FieldDescription(SFImagePtr::getClassType(),
                     "NDFImage", 
                     NDFImageFieldId, NDFImageFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFNDFImage),
    new FieldDescription(SFPnt3f::getClassType(), 
                     "lightPos",
                     LightPosFieldId, LightPosFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFLightPos),
    new FieldDescription(SFColor3f::getClassType(), 
                     "lightSpecular", 
                     LightSpecularFieldId, LightSpecularFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFLightSpecular),
    new FieldDescription(SFBool::getClassType(),
                     "OnlyDiffuse",
                     OnlyDiffuseFieldId, OnlyDiffuseFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFOnlyDiffuse),
    new FieldDescription(SFUInt8::getClassType(),
                     "UseFPorRC",
                     UseFPorRCFieldId, UseFPorRCFieldMask,
                     false,
                     (FieldAccessMethod) &NDFMaterialBase::getSFUseFPorRC)
};


FieldContainerType NDFMaterialBase::_type(
    "NDFMaterial",
    "ChunkMaterial",
    NULL,
    (PrototypeCreateF) &NDFMaterialBase::createEmpty,
    NDFMaterial::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(NDFMaterialBase, NDFMaterialPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &NDFMaterialBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &NDFMaterialBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr NDFMaterialBase::shallowCopy(void) const 
{ 
    NDFMaterialPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const NDFMaterial *>(this)); 

    return returnValue; 
}

UInt32 NDFMaterialBase::getContainerSize(void) const 
{ 
    return sizeof(NDFMaterial); 
}


void NDFMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((NDFMaterialBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

NDFMaterialBase::NDFMaterialBase(void) :
    _sfAmbient                (Color3f(0,0,0)), 
    _sfDiffuse                (Color3f(0,0,0)), 
    _sfSpecular               (Color3f(1,1,1)), 
    _sfKa                     (Real32(1.0)), 
    _sfKd                     (Real32(1.0)), 
    _sfKs                     (Real32(1.0)), 
    _sfEmission               (Color3f(0,0,0)), 
    _sfFresnel                (Color3f(1,1,1)), 
    _sfTransparency           (Real32(0)), 
    _sfFresnelTerm            (bool(true)), 
    _sfSelfShadowingTerm      (bool(true)), 
    _sfCorrectCosine          (bool(true)), 
    _sfDiffuseImage           (),
    _sfNDFImage               (),
    _sfLightPos               (Pnt3f(0,0,0)), 
    _sfLightSpecular          (Color3f(1,1,1)),
    _sfOnlyDiffuse       (false),
    _sfUseFPorRC       (1),
    Inherited()
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

NDFMaterialBase::NDFMaterialBase(const NDFMaterialBase &source) :
    _sfAmbient                (source._sfAmbient                ), 
    _sfDiffuse                (source._sfDiffuse                ), 
    _sfSpecular               (source._sfSpecular               ), 
    _sfKa                     (source._sfKa                     ), 
    _sfKd                     (source._sfKd                     ), 
    _sfKs                     (source._sfKs                     ), 
    _sfEmission               (source._sfEmission               ), 
    _sfFresnel                (source._sfFresnel                ), 
    _sfTransparency           (source._sfTransparency           ), 
    _sfFresnelTerm            (source._sfFresnelTerm            ), 
    _sfSelfShadowingTerm      (source._sfSelfShadowingTerm      ), 
    _sfCorrectCosine          (source._sfCorrectCosine          ), 
    _sfDiffuseImage           (source._sfDiffuseImage           ),
    _sfNDFImage               (source._sfNDFImage               ),
    _sfLightPos               (source._sfLightPos               ), 
    _sfLightSpecular          (source._sfLightSpecular          ),
    _sfOnlyDiffuse            (source._sfOnlyDiffuse),
    _sfUseFPorRC              (source._sfUseFPorRC),
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

NDFMaterialBase::~NDFMaterialBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 NDFMaterialBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        returnValue += _sfAmbient.getBinSize();
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        returnValue += _sfDiffuse.getBinSize();
    }

    if(FieldBits::NoField != (SpecularFieldMask & whichField))
    {
        returnValue += _sfSpecular.getBinSize();
    }

    if(FieldBits::NoField != (KaFieldMask & whichField))
    {
        returnValue += _sfKa.getBinSize();
    }

    if(FieldBits::NoField != (KdFieldMask & whichField))
    {
        returnValue += _sfKd.getBinSize();
    }

    if(FieldBits::NoField != (KsFieldMask & whichField))
    {
        returnValue += _sfKs.getBinSize();
    }

    if(FieldBits::NoField != (EmissionFieldMask & whichField))
    {
        returnValue += _sfEmission.getBinSize();
    }

    if(FieldBits::NoField != (FresnelFieldMask & whichField))
    {
        returnValue += _sfFresnel.getBinSize();
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        returnValue += _sfTransparency.getBinSize();
    }

    if(FieldBits::NoField != (FresnelTermFieldMask & whichField))
    {
        returnValue += _sfFresnelTerm.getBinSize();
    }

    if(FieldBits::NoField != (SelfShadowingTermFieldMask & whichField))
    {
        returnValue += _sfSelfShadowingTerm.getBinSize();
    }

    if(FieldBits::NoField != (CorrectCosineFieldMask & whichField))
    {
        returnValue += _sfCorrectCosine.getBinSize();
    }

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
    {
        returnValue += _sfDiffuseImage.getBinSize();
    }

    if(FieldBits::NoField != (NDFImageFieldMask & whichField))
    {
        returnValue += _sfNDFImage.getBinSize();
    }

    if(FieldBits::NoField != (LightPosFieldMask & whichField))
    {
        returnValue += _sfLightPos.getBinSize();
    }

    if(FieldBits::NoField != (LightSpecularFieldMask & whichField))
    {
        returnValue += _sfLightSpecular.getBinSize();
    }

    if(FieldBits::NoField != (OnlyDiffuseFieldMask & whichField))
    {
        returnValue += _sfOnlyDiffuse.getBinSize();
    }

    if(FieldBits::NoField != (UseFPorRCFieldMask & whichField))
    {
        returnValue += _sfUseFPorRC.getBinSize();
    }


    return returnValue;
}

void NDFMaterialBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        _sfAmbient.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularFieldMask & whichField))
    {
        _sfSpecular.copyToBin(pMem);
    }

    if(FieldBits::NoField != (KaFieldMask & whichField))
    {
        _sfKa.copyToBin(pMem);
    }

    if(FieldBits::NoField != (KdFieldMask & whichField))
    {
        _sfKd.copyToBin(pMem);
    }

    if(FieldBits::NoField != (KsFieldMask & whichField))
    {
        _sfKs.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EmissionFieldMask & whichField))
    {
        _sfEmission.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FresnelFieldMask & whichField))
    {
        _sfFresnel.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        _sfTransparency.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FresnelTermFieldMask & whichField))
    {
        _sfFresnelTerm.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelfShadowingTermFieldMask & whichField))
    {
        _sfSelfShadowingTerm.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CorrectCosineFieldMask & whichField))
    {
        _sfCorrectCosine.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
    {
        _sfDiffuseImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NDFImageFieldMask & whichField))
    {
        _sfNDFImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LightPosFieldMask & whichField))
    {
        _sfLightPos.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LightSpecularFieldMask & whichField))
    {
        _sfLightSpecular.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OnlyDiffuseFieldMask & whichField))
    {
        _sfOnlyDiffuse.copyToBin(pMem);
    }

    if(FieldBits::NoField != (UseFPorRCFieldMask & whichField))
    {
        _sfUseFPorRC.copyToBin(pMem);
    }


}

void NDFMaterialBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        _sfAmbient.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularFieldMask & whichField))
    {
        _sfSpecular.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (KaFieldMask & whichField))
    {
        _sfKa.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (KdFieldMask & whichField))
    {
        _sfKd.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (KsFieldMask & whichField))
    {
        _sfKs.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EmissionFieldMask & whichField))
    {
        _sfEmission.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FresnelFieldMask & whichField))
    {
        _sfFresnel.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        _sfTransparency.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FresnelTermFieldMask & whichField))
    {
        _sfFresnelTerm.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelfShadowingTermFieldMask & whichField))
    {
        _sfSelfShadowingTerm.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CorrectCosineFieldMask & whichField))
    {
        _sfCorrectCosine.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
    {
        _sfDiffuseImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NDFImageFieldMask & whichField))
    {
        _sfNDFImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LightPosFieldMask & whichField))
    {
        _sfLightPos.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LightSpecularFieldMask & whichField))
    {
        _sfLightSpecular.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OnlyDiffuseFieldMask & whichField))
    {
        _sfOnlyDiffuse.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (UseFPorRCFieldMask & whichField))
    {
        _sfUseFPorRC.copyFromBin(pMem);
    }


}

void NDFMaterialBase::executeSyncImpl(      NDFMaterialBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
        _sfAmbient.syncWith(pOther->_sfAmbient);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
        _sfDiffuse.syncWith(pOther->_sfDiffuse);

    if(FieldBits::NoField != (SpecularFieldMask & whichField))
        _sfSpecular.syncWith(pOther->_sfSpecular);

    if(FieldBits::NoField != (KaFieldMask & whichField))
        _sfKa.syncWith(pOther->_sfKa);

    if(FieldBits::NoField != (KdFieldMask & whichField))
        _sfKd.syncWith(pOther->_sfKd);

    if(FieldBits::NoField != (KsFieldMask & whichField))
        _sfKs.syncWith(pOther->_sfKs);

    if(FieldBits::NoField != (EmissionFieldMask & whichField))
        _sfEmission.syncWith(pOther->_sfEmission);

    if(FieldBits::NoField != (FresnelFieldMask & whichField))
        _sfFresnel.syncWith(pOther->_sfFresnel);

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
        _sfTransparency.syncWith(pOther->_sfTransparency);

    if(FieldBits::NoField != (FresnelTermFieldMask & whichField))
        _sfFresnelTerm.syncWith(pOther->_sfFresnelTerm);

    if(FieldBits::NoField != (SelfShadowingTermFieldMask & whichField))
        _sfSelfShadowingTerm.syncWith(pOther->_sfSelfShadowingTerm);

    if(FieldBits::NoField != (CorrectCosineFieldMask & whichField))
        _sfCorrectCosine.syncWith(pOther->_sfCorrectCosine);

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
        _sfDiffuseImage.syncWith(pOther->_sfDiffuseImage);

    if(FieldBits::NoField != (NDFImageFieldMask & whichField))
        _sfNDFImage.syncWith(pOther->_sfNDFImage);

    if(FieldBits::NoField != (LightPosFieldMask & whichField))
        _sfLightPos.syncWith(pOther->_sfLightPos);

    if(FieldBits::NoField != (LightSpecularFieldMask & whichField))
        _sfLightSpecular.syncWith(pOther->_sfLightSpecular);

    if(FieldBits::NoField != (OnlyDiffuseFieldMask & whichField))
        _sfOnlyDiffuse.syncWith(pOther->_sfOnlyDiffuse);

    if(FieldBits::NoField != (UseFPorRCFieldMask & whichField))
        _sfUseFPorRC.syncWith(pOther->_sfUseFPorRC);


}



OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<NDFMaterialPtr>::_type("NDFMaterialPtr", "ChunkMaterialPtr");
#endif


OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGNDFMaterialBase.cpp,v 1.1 2003/05/19 12:04:39 jnkautz Exp $";
    static Char8 cvsid_hpp       [] = OSGNDFMATERIALBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGNDFMATERIALBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGNDFMATERIALFIELDS_HEADER_CVSID;
}

