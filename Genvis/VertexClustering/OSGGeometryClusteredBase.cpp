/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GeometryClustered!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEGEOMETRYCLUSTEREDINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGGeometryClusteredBase.h"
#include "OSGGeometryClustered.h"

#include "OSGGeometryPositionCluster.h"     // Grid default header

OSG_USING_NAMESPACE

const OSG::BitVector  GeometryClusteredBase::NumCellsFieldMask = 
    (TypeTraits<BitVector>::One << GeometryClusteredBase::NumCellsFieldId);

const OSG::BitVector  GeometryClusteredBase::GridFieldMask = 
    (TypeTraits<BitVector>::One << GeometryClusteredBase::GridFieldId);

const OSG::BitVector  GeometryClusteredBase::ModelFilenameFieldMask = 
    (TypeTraits<BitVector>::One << GeometryClusteredBase::ModelFilenameFieldId);

const OSG::BitVector  GeometryClusteredBase::NormalScaleFieldMask = 
    (TypeTraits<BitVector>::One << GeometryClusteredBase::NormalScaleFieldId);

const OSG::BitVector  GeometryClusteredBase::NumTrianglesFieldMask = 
    (TypeTraits<BitVector>::One << GeometryClusteredBase::NumTrianglesFieldId);

const OSG::BitVector  GeometryClusteredBase::OffsetFacesFieldMask = 
    (TypeTraits<BitVector>::One << GeometryClusteredBase::OffsetFacesFieldId);

const OSG::BitVector GeometryClusteredBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          GeometryClusteredBase::_sfNumCells
    parameter for grid creation
*/
/*! \var SetUnionGridP   GeometryClusteredBase::_sfGrid
    grid used for clustering
*/
/*! \var std::string     GeometryClusteredBase::_sfModelFilename
    filename of OBJ model; if not set then use Geometry fields
*/
/*! \var Real32          GeometryClusteredBase::_sfNormalScale
    scaling factor for surface normals; use +/-1 depending on the model
*/
/*! \var UInt32          GeometryClusteredBase::_sfNumTriangles
    internal counter for triangles after clustering
*/
/*! \var Int32           GeometryClusteredBase::_sfOffsetFaces
    internal filestream offset of the faces section in the OBJ file
*/

//! GeometryClustered description

FieldDescription *GeometryClusteredBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "numCells", 
                     NumCellsFieldId, NumCellsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryClusteredBase::getSFNumCells),
    new FieldDescription(SFSetUnionGridP::getClassType(), 
                     "grid", 
                     GridFieldId, GridFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryClusteredBase::getSFGrid),
    new FieldDescription(SFString::getClassType(), 
                     "modelFilename", 
                     ModelFilenameFieldId, ModelFilenameFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryClusteredBase::getSFModelFilename),
    new FieldDescription(SFReal32::getClassType(), 
                     "normalScale", 
                     NormalScaleFieldId, NormalScaleFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryClusteredBase::getSFNormalScale),
    new FieldDescription(SFUInt32::getClassType(), 
                     "numTriangles", 
                     NumTrianglesFieldId, NumTrianglesFieldMask,
                     true,
                     (FieldAccessMethod) &GeometryClusteredBase::getSFNumTriangles),
    new FieldDescription(SFInt32::getClassType(), 
                     "offsetFaces", 
                     OffsetFacesFieldId, OffsetFacesFieldMask,
                     true,
                     (FieldAccessMethod) &GeometryClusteredBase::getSFOffsetFaces)
};


FieldContainerType GeometryClusteredBase::_type(
    "GeometryClustered",
    "Geometry",
    NULL,
    (PrototypeCreateF) &GeometryClusteredBase::createEmpty,
    GeometryClustered::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(GeometryClusteredBase, GeometryClusteredPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &GeometryClusteredBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &GeometryClusteredBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr GeometryClusteredBase::shallowCopy(void) const 
{ 
    GeometryClusteredPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const GeometryClustered *>(this)); 

    return returnValue; 
}

UInt32 GeometryClusteredBase::getContainerSize(void) const 
{ 
    return sizeof(GeometryClustered); 
}


void GeometryClusteredBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((GeometryClusteredBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

GeometryClusteredBase::GeometryClusteredBase(void) :
    _sfNumCells               (Real32(5)), 
    _sfGrid                   (SetUnionGridP(NULL)), 
    _sfModelFilename          (), 
    _sfNormalScale            (Real32(1.0f)), 
    _sfNumTriangles           (), 
    _sfOffsetFaces            (Int32(0)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

GeometryClusteredBase::GeometryClusteredBase(const GeometryClusteredBase &source) :
    _sfNumCells               (source._sfNumCells               ), 
    _sfGrid                   (source._sfGrid                   ), 
    _sfModelFilename          (source._sfModelFilename          ), 
    _sfNormalScale            (source._sfNormalScale            ), 
    _sfNumTriangles           (source._sfNumTriangles           ), 
    _sfOffsetFaces            (source._sfOffsetFaces            ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

GeometryClusteredBase::~GeometryClusteredBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 GeometryClusteredBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (NumCellsFieldMask & whichField))
    {
        returnValue += _sfNumCells.getBinSize();
    }

    if(FieldBits::NoField != (GridFieldMask & whichField))
    {
        returnValue += _sfGrid.getBinSize();
    }

    if(FieldBits::NoField != (ModelFilenameFieldMask & whichField))
    {
        returnValue += _sfModelFilename.getBinSize();
    }

    if(FieldBits::NoField != (NormalScaleFieldMask & whichField))
    {
        returnValue += _sfNormalScale.getBinSize();
    }

    if(FieldBits::NoField != (NumTrianglesFieldMask & whichField))
    {
        returnValue += _sfNumTriangles.getBinSize();
    }

    if(FieldBits::NoField != (OffsetFacesFieldMask & whichField))
    {
        returnValue += _sfOffsetFaces.getBinSize();
    }


    return returnValue;
}

void GeometryClusteredBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (NumCellsFieldMask & whichField))
    {
        _sfNumCells.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GridFieldMask & whichField))
    {
        _sfGrid.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ModelFilenameFieldMask & whichField))
    {
        _sfModelFilename.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NormalScaleFieldMask & whichField))
    {
        _sfNormalScale.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NumTrianglesFieldMask & whichField))
    {
        _sfNumTriangles.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OffsetFacesFieldMask & whichField))
    {
        _sfOffsetFaces.copyToBin(pMem);
    }


}

void GeometryClusteredBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (NumCellsFieldMask & whichField))
    {
        _sfNumCells.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GridFieldMask & whichField))
    {
        _sfGrid.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ModelFilenameFieldMask & whichField))
    {
        _sfModelFilename.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NormalScaleFieldMask & whichField))
    {
        _sfNormalScale.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NumTrianglesFieldMask & whichField))
    {
        _sfNumTriangles.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OffsetFacesFieldMask & whichField))
    {
        _sfOffsetFaces.copyFromBin(pMem);
    }


}

void GeometryClusteredBase::executeSyncImpl(      GeometryClusteredBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (NumCellsFieldMask & whichField))
        _sfNumCells.syncWith(pOther->_sfNumCells);

    if(FieldBits::NoField != (GridFieldMask & whichField))
        _sfGrid.syncWith(pOther->_sfGrid);

    if(FieldBits::NoField != (ModelFilenameFieldMask & whichField))
        _sfModelFilename.syncWith(pOther->_sfModelFilename);

    if(FieldBits::NoField != (NormalScaleFieldMask & whichField))
        _sfNormalScale.syncWith(pOther->_sfNormalScale);

    if(FieldBits::NoField != (NumTrianglesFieldMask & whichField))
        _sfNumTriangles.syncWith(pOther->_sfNumTriangles);

    if(FieldBits::NoField != (OffsetFacesFieldMask & whichField))
        _sfOffsetFaces.syncWith(pOther->_sfOffsetFaces);


}



OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<GeometryClusteredPtr>::_type("GeometryClusteredPtr", "GeometryPtr");
#endif


OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGGeometryClusteredBase.cpp,v 1.5 2004/12/20 15:54:30 fuenfzig Exp $";
    static Char8 cvsid_hpp       [] = OSGGEOMETRYCLUSTEREDBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGGEOMETRYCLUSTEREDBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGGEOMETRYCLUSTEREDFIELDS_HEADER_CVSID;
}

