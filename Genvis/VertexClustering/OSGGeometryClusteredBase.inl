/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GeometryClustered!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &GeometryClusteredBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 GeometryClusteredBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
GeometryClusteredPtr GeometryClusteredBase::create(void) 
{
    GeometryClusteredPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = GeometryClusteredPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
GeometryClusteredPtr GeometryClusteredBase::createEmpty(void) 
{ 
    GeometryClusteredPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the GeometryClustered::_sfNumCells field.
inline
SFReal32 *GeometryClusteredBase::getSFNumCells(void)
{
    return &_sfNumCells;
}

//! Get the GeometryClustered::_sfGrid field.
inline
SFSetUnionGridP *GeometryClusteredBase::getSFGrid(void)
{
    return &_sfGrid;
}

//! Get the GeometryClustered::_sfModelFilename field.
inline
SFString *GeometryClusteredBase::getSFModelFilename(void)
{
    return &_sfModelFilename;
}

//! Get the GeometryClustered::_sfNormalScale field.
inline
SFReal32 *GeometryClusteredBase::getSFNormalScale(void)
{
    return &_sfNormalScale;
}

//! Get the GeometryClustered::_sfNumTriangles field.
inline
SFUInt32 *GeometryClusteredBase::getSFNumTriangles(void)
{
    return &_sfNumTriangles;
}

//! Get the GeometryClustered::_sfOffsetFaces field.
inline
SFInt32 *GeometryClusteredBase::getSFOffsetFaces(void)
{
    return &_sfOffsetFaces;
}


//! Get the value of the GeometryClustered::_sfNumCells field.
inline
Real32 &GeometryClusteredBase::getNumCells(void)
{
    return _sfNumCells.getValue();
}

//! Get the value of the GeometryClustered::_sfNumCells field.
inline
const Real32 &GeometryClusteredBase::getNumCells(void) const
{
    return _sfNumCells.getValue();
}

//! Set the value of the GeometryClustered::_sfNumCells field.
inline
void GeometryClusteredBase::setNumCells(const Real32 &value)
{
    _sfNumCells.setValue(value);
}

//! Get the value of the GeometryClustered::_sfGrid field.
inline
SetUnionGridP &GeometryClusteredBase::getGrid(void)
{
    return _sfGrid.getValue();
}

//! Get the value of the GeometryClustered::_sfGrid field.
inline
const SetUnionGridP &GeometryClusteredBase::getGrid(void) const
{
    return _sfGrid.getValue();
}

//! Set the value of the GeometryClustered::_sfGrid field.
inline
void GeometryClusteredBase::setGrid(const SetUnionGridP &value)
{
    _sfGrid.setValue(value);
}

//! Get the value of the GeometryClustered::_sfModelFilename field.
inline
std::string &GeometryClusteredBase::getModelFilename(void)
{
    return _sfModelFilename.getValue();
}

//! Get the value of the GeometryClustered::_sfModelFilename field.
inline
const std::string &GeometryClusteredBase::getModelFilename(void) const
{
    return _sfModelFilename.getValue();
}

//! Set the value of the GeometryClustered::_sfModelFilename field.
inline
void GeometryClusteredBase::setModelFilename(const std::string &value)
{
    _sfModelFilename.setValue(value);
}

//! Get the value of the GeometryClustered::_sfNormalScale field.
inline
Real32 &GeometryClusteredBase::getNormalScale(void)
{
    return _sfNormalScale.getValue();
}

//! Get the value of the GeometryClustered::_sfNormalScale field.
inline
const Real32 &GeometryClusteredBase::getNormalScale(void) const
{
    return _sfNormalScale.getValue();
}

//! Set the value of the GeometryClustered::_sfNormalScale field.
inline
void GeometryClusteredBase::setNormalScale(const Real32 &value)
{
    _sfNormalScale.setValue(value);
}

//! Get the value of the GeometryClustered::_sfNumTriangles field.
inline
UInt32 &GeometryClusteredBase::getNumTriangles(void)
{
    return _sfNumTriangles.getValue();
}

//! Get the value of the GeometryClustered::_sfNumTriangles field.
inline
const UInt32 &GeometryClusteredBase::getNumTriangles(void) const
{
    return _sfNumTriangles.getValue();
}

//! Set the value of the GeometryClustered::_sfNumTriangles field.
inline
void GeometryClusteredBase::setNumTriangles(const UInt32 &value)
{
    _sfNumTriangles.setValue(value);
}

//! Get the value of the GeometryClustered::_sfOffsetFaces field.
inline
Int32 &GeometryClusteredBase::getOffsetFaces(void)
{
    return _sfOffsetFaces.getValue();
}

//! Get the value of the GeometryClustered::_sfOffsetFaces field.
inline
const Int32 &GeometryClusteredBase::getOffsetFaces(void) const
{
    return _sfOffsetFaces.getValue();
}

//! Set the value of the GeometryClustered::_sfOffsetFaces field.
inline
void GeometryClusteredBase::setOffsetFaces(const Int32 &value)
{
    _sfOffsetFaces.setValue(value);
}


OSG_END_NAMESPACE

#define OSGGEOMETRYCLUSTEREDBASE_INLINE_CVSID "@(#)$Id: OSGGeometryClusteredBase.inl,v 1.5 2004/12/20 15:54:30 fuenfzig Exp $"

