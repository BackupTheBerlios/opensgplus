/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GenvisCache!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEGENVISCACHEINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGGenvisCacheBase.h"
#include "OSGGenvisCache.h"


OSG_USING_NAMESPACE

const OSG::BitVector  GenvisCacheBase::AdapterMatrixFieldMask = 
    (1 << GenvisCacheBase::AdapterMatrixFieldId);

const OSG::BitVector  GenvisCacheBase::BVolAdapterFieldMask = 
    (1 << GenvisCacheBase::BVolAdapterFieldId);
const OSG::BitVector  GenvisCacheBase::Adapter2FieldMask = 
    (1 << GenvisCacheBase::Adapter2FieldId);
const OSG::BitVector  GenvisCacheBase::Adapter3FieldMask = 
    (1 << GenvisCacheBase::Adapter3FieldId);

const OSG::BitVector  GenvisCacheBase::CollisionCacheFieldMask = 
    (1 << GenvisCacheBase::CollisionCacheFieldId);



// Field descriptions

/*! \var Matrix          GenvisCacheBase::_mfAdapterMatrix
    matrices for adapter construction
*/
/*! \var BVolAdapterBaseP GenvisCacheBase::_mfBVolAdapter
    bvol adapters constructed in the current scenegraph
*/
/*! \var BVolAdapterBaseP GenvisCacheBase::_mfCollisionCache
    generalized front cache for hierarchy traversal
*/

//! GenvisCache description

FieldDescription *GenvisCacheBase::_desc[] = 
{
    new FieldDescription(MFMatrix::getClassType(), 
                     "AdapterMatrix", 
                     AdapterMatrixFieldId, AdapterMatrixFieldMask,
                     false,
                     (FieldAccessMethod) &GenvisCacheBase::getMFAdapterMatrix),
    new FieldDescription(MFBVolAdapterBaseP::getClassType(), 
                     "BVolAdapter", 
                     BVolAdapterFieldId, BVolAdapterFieldMask,
                     false,
                     (FieldAccessMethod) &GenvisCacheBase::getMFBVolAdapter),
    new FieldDescription(MFBVolAdapterBaseP::getClassType(), 
                     "Adapter2", 
                     Adapter2FieldId, Adapter2FieldMask,
                     false,
                     (FieldAccessMethod) &GenvisCacheBase::getMFAdapter2),
    new FieldDescription(MFBVolAdapterBaseP::getClassType(), 
                     "Adapter3", 
                     Adapter3FieldId, Adapter3FieldMask,
                     false,
                     (FieldAccessMethod) &GenvisCacheBase::getMFAdapter3),
    new FieldDescription(MFBVolAdapterBaseP::getClassType(), 
                     "CollisionCache", 
                     CollisionCacheFieldId, CollisionCacheFieldMask,
                     false,
                     (FieldAccessMethod) &GenvisCacheBase::getMFCollisionCache)
};


FieldContainerType GenvisCacheBase::_type(
    "GenvisCache",
    "Attachment",
    NULL,
    (PrototypeCreateF) &GenvisCacheBase::createEmpty,
    GenvisCache::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(GenvisCacheBase, GenvisCachePtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &GenvisCacheBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &GenvisCacheBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr GenvisCacheBase::shallowCopy(void) const 
{ 
    GenvisCachePtr returnValue; 

    newPtr(returnValue, dynamic_cast<const GenvisCache *>(this)); 

    return returnValue; 
}

UInt32 GenvisCacheBase::getContainerSize(void) const 
{ 
    return sizeof(GenvisCache); 
}


void GenvisCacheBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((GenvisCacheBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

GenvisCacheBase::GenvisCacheBase(void) :
    _mfAdapterMatrix          (), 
    _mfBVolAdapter            (), 
    _mfAdapter2            (), 
    _mfAdapter3            (), 
    _mfCollisionCache         (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

GenvisCacheBase::GenvisCacheBase(const GenvisCacheBase &source) :
    _mfAdapterMatrix          (source._mfAdapterMatrix          ), 
    _mfBVolAdapter            (source._mfBVolAdapter            ), 
    _mfAdapter2            (source._mfAdapter2            ), 
    _mfAdapter3            (source._mfAdapter3            ), 
    _mfCollisionCache         (source._mfCollisionCache         ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

GenvisCacheBase::~GenvisCacheBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 GenvisCacheBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AdapterMatrixFieldMask & whichField))
    {
        returnValue += _mfAdapterMatrix.getBinSize();
    }

    if(FieldBits::NoField != (BVolAdapterFieldMask & whichField))
    {
        returnValue += _mfBVolAdapter.getBinSize();
    }
    if(FieldBits::NoField != (Adapter2FieldMask & whichField))
    {
        returnValue += _mfAdapter2.getBinSize();
    }
    if(FieldBits::NoField != (Adapter3FieldMask & whichField))
    {
        returnValue += _mfAdapter3.getBinSize();
    }

    if(FieldBits::NoField != (CollisionCacheFieldMask & whichField))
    {
        returnValue += _mfCollisionCache.getBinSize();
    }


    return returnValue;
}

void GenvisCacheBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AdapterMatrixFieldMask & whichField))
    {
        _mfAdapterMatrix.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BVolAdapterFieldMask & whichField))
    {
        _mfBVolAdapter.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Adapter2FieldMask & whichField))
    {
        _mfAdapter2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Adapter3FieldMask & whichField))
    {
        _mfAdapter3.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CollisionCacheFieldMask & whichField))
    {
        _mfCollisionCache.copyToBin(pMem);
    }


}

void GenvisCacheBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AdapterMatrixFieldMask & whichField))
    {
        _mfAdapterMatrix.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BVolAdapterFieldMask & whichField))
    {
        _mfBVolAdapter.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Adapter2FieldMask & whichField))
    {
        _mfAdapter2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Adapter3FieldMask & whichField))
    {
        _mfAdapter3.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CollisionCacheFieldMask & whichField))
    {
        _mfCollisionCache.copyFromBin(pMem);
    }


}

void GenvisCacheBase::executeSyncImpl(      GenvisCacheBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (AdapterMatrixFieldMask & whichField))
        _mfAdapterMatrix.syncWith(pOther->_mfAdapterMatrix);

    if(FieldBits::NoField != (BVolAdapterFieldMask & whichField))
        _mfBVolAdapter.syncWith(pOther->_mfBVolAdapter);
    if(FieldBits::NoField != (Adapter2FieldMask & whichField))
        _mfAdapter2.syncWith(pOther->_mfAdapter2);
    if(FieldBits::NoField != (Adapter3FieldMask & whichField))
        _mfAdapter3.syncWith(pOther->_mfAdapter3);

    if(FieldBits::NoField != (CollisionCacheFieldMask & whichField))
        _mfCollisionCache.syncWith(pOther->_mfCollisionCache);


}



#include <OSGSFieldTypeDef.inl>
#include <OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<GenvisCachePtr>::_type("GenvisCachePtr", "AttachmentPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(GenvisCachePtr, OSG_GENVISLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(GenvisCachePtr, OSG_GENVISLIB_DLLTMPLMAPPING);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGGenvisCacheBase.cpp,v 1.1 2003/09/11 16:20:29 fuenfzig Exp $";
    static Char8 cvsid_hpp       [] = OSGGENVISCACHEBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGGENVISCACHEBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGGENVISCACHEFIELDS_HEADER_CVSID;
}

