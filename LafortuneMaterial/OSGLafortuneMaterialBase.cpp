/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LafortuneMaterial!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILELAFORTUNEMATERIALINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGLafortuneMaterialBase.h"
#include "OSGLafortuneMaterial.h"


OSG_USING_NAMESPACE

const OSG::BitVector  LafortuneMaterialBase::AmbientFieldMask = 
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::AmbientFieldId);

const OSG::BitVector  LafortuneMaterialBase::DiffuseFieldMask = 
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::DiffuseFieldId);

const OSG::BitVector  LafortuneMaterialBase::KaFieldMask = 
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::KaFieldId);

const OSG::BitVector  LafortuneMaterialBase::Rho_dFieldMask = 
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::Rho_dFieldId);

const OSG::BitVector  LafortuneMaterialBase::KsFieldMask = 
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::KsFieldId);

const OSG::BitVector  LafortuneMaterialBase::EmissionFieldMask = 
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::EmissionFieldId);

const OSG::BitVector  LafortuneMaterialBase::TransparencyFieldMask = 
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::TransparencyFieldId);

const OSG::BitVector  LafortuneMaterialBase::CxFieldMask = 
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::CxFieldId);

const OSG::BitVector  LafortuneMaterialBase::CzFieldMask = 
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::CzFieldId);

const OSG::BitVector  LafortuneMaterialBase::NFieldMask = 
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::NFieldId);

const OSG::BitVector  LafortuneMaterialBase::SelectorFieldMask = 
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::SelectorFieldId);

const OSG::BitVector  LafortuneMaterialBase::LightPosFieldMask = 
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::LightPosFieldId);

const OSG::BitVector  LafortuneMaterialBase::UseweightFieldMask =
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::UseweightFieldId);

const OSG::BitVector  LafortuneMaterialBase::TextureImageFieldMask =
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::TextureImageFieldId);

const OSG::BitVector  LafortuneMaterialBase::UseFPorRCFieldMask =
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::UseFPorRCFieldId);

const OSG::BitVector  LafortuneMaterialBase::CompTexCoordFieldMask =
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::CompTexCoordFieldId);

const OSG::BitVector  LafortuneMaterialBase::HalfBBoxObjFieldMask =
    (TypeTraits<BitVector>::One << LafortuneMaterialBase::HalfBBoxObjFieldId);

const OSG::BitVector LafortuneMaterialBase::MTInfluenceMask =
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 



// Field descriptions

/*! \var Color3f         LafortuneMaterialBase::_sfAmbient
    ambient color
*/
/*! \var Color3f         LafortuneMaterialBase::_sfDiffuse
    diffuse color
*/
/*! \var Real32          LafortuneMaterialBase::_sfKa
    coefficient for ambient term
*/
/*! \var Real32          LafortuneMaterialBase::_sfRho_d
    coefficient for diffuse term
*/
/*! \var Real32          LafortuneMaterialBase::_sfKs
    For scaling the contribution of Ka term
*/
/*! \var Color3f         LafortuneMaterialBase::_sfEmission
    emission
*/
/*! \var Real32          LafortuneMaterialBase::_sfTransparency
    transparency
*/
/*! \var Color3f         LafortuneMaterialBase::_sfCx
    lobe parameter (Cx=Cy)
*/
/*! \var Color3f         LafortuneMaterialBase::_sfCz
    lobe parameter
*/
/*! \var Color3f         LafortuneMaterialBase::_sfN
    lobe parameter (exponent)
*/
/*! \var Int8            LafortuneMaterialBase::_sfSelector
    selector for choose the case of using the texture
*/
/*! \var Pnt3f           LafortuneMaterialBase::_sfLightPos
    Position of light source
*/
/*! \var bool            LafortuneMaterialBase::_sfUseweight
    should be set to false if no weight texture is specified
*/
/*! \var ImagePtr        LafortuneMaterialBase::_sfTextureImage
    The pointer for the diffuse texture
*/
/*! \var Int8            LafortuneMaterialBase::_sfUseFPorRC
    should be set to false if no weight texture is specified
*/
/*! \var bool            LafortuneMaterialBase::_sfCompTexCoord
    should be set to false if texture coordinates should be taken from the object
*/
/*! \var Real32          LafortuneMaterialBase::_sfHalfBBoxObj
    half of the object's bounding box size
*/

//! LafortuneMaterial description

FieldDescription *LafortuneMaterialBase::_desc[] = 
{
    new FieldDescription(SFColor3f::getClassType(), 
                     "ambient", 
                     AmbientFieldId, AmbientFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFAmbient),
    new FieldDescription(SFColor3f::getClassType(), 
                     "diffuse", 
                     DiffuseFieldId, DiffuseFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFDiffuse),
    new FieldDescription(SFReal32::getClassType(), 
                     "Ka",
                     KaFieldId, KaFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFKa),
    new FieldDescription(SFReal32::getClassType(), 
                     "Rho_d", 
                     Rho_dFieldId, Rho_dFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFRho_d),
    new FieldDescription(SFReal32::getClassType(), 
                     "Ks", 
                     KsFieldId, KsFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFKs),
    new FieldDescription(SFColor3f::getClassType(), 
                     "emission", 
                     EmissionFieldId, EmissionFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFEmission),
    new FieldDescription(SFReal32::getClassType(), 
                     "transparency", 
                     TransparencyFieldId, TransparencyFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFTransparency),
    new FieldDescription(SFColor3f::getClassType(), 
                     "Cx", 
                     CxFieldId, CxFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFCx),
    new FieldDescription(SFColor3f::getClassType(), 
                     "Cz", 
                     CzFieldId, CzFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFCz),
    new FieldDescription(SFColor3f::getClassType(), 
                     "N", 
                     NFieldId, NFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFN),
    new FieldDescription(SFInt8::getClassType(), 
                     "selector", 
                     SelectorFieldId, SelectorFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFSelector),
    new FieldDescription(SFPnt3f::getClassType(), 
                     "lightPos", 
                     LightPosFieldId, LightPosFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFLightPos),
    new FieldDescription(SFBool::getClassType(),
                     "useweight",
                     UseweightFieldId, UseweightFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFUseweight),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "TextureImage", 
                     TextureImageFieldId, TextureImageFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFTextureImage),
    new FieldDescription(SFInt8::getClassType(),
                     "useFPorRC",
                     UseFPorRCFieldId, UseFPorRCFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFUseFPorRC),
    new FieldDescription(SFBool::getClassType(),
                     "CompTexCoord",
                     CompTexCoordFieldId, CompTexCoordFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFCompTexCoord),
    new FieldDescription(SFInt8::getClassType(),
                     "HalfBBoxObj",
                     HalfBBoxObjFieldId, HalfBBoxObjFieldMask,
                     false,
                     (FieldAccessMethod) &LafortuneMaterialBase::getSFHalfBBoxObj)
};


FieldContainerType LafortuneMaterialBase::_type(
    "LafortuneMaterial",
    "ChunkMaterial",
    NULL,
    (PrototypeCreateF) &LafortuneMaterialBase::createEmpty,
    LafortuneMaterial::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(LafortuneMaterialBase, LafortuneMaterialPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &LafortuneMaterialBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &LafortuneMaterialBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr LafortuneMaterialBase::shallowCopy(void) const 
{ 
    LafortuneMaterialPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const LafortuneMaterial *>(this)); 

    return returnValue; 
}

UInt32 LafortuneMaterialBase::getContainerSize(void) const 
{ 
    return sizeof(LafortuneMaterial); 
}


void LafortuneMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((LafortuneMaterialBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

LafortuneMaterialBase::LafortuneMaterialBase(void) :
    _sfAmbient                (Color3f(0,0,0)), 
    _sfDiffuse                (Color3f(0,0,0)),
    _sfKa                     (Real32(1.0)),
    _sfRho_d                  (Real32(1.0)), 
    _sfKs                     (Real32(1.0)), 
    _sfEmission               (Color3f(0,0,0)), 
    _sfTransparency           (Real32(0)), 
    _sfCx                     (Color3f(0.0, 0.0, 0.0)), 
    _sfCz                     (Color3f(0.0, 0.0, 0.0)), 
    _sfN                      (Color3f(0.0, 0.0, 0.0)), 
    _sfSelector               (), 
    _sfLightPos               (Pnt3f(0,0,0)), 
    _sfUseweight              (),
    _sfTextureImage           (),
    _sfUseFPorRC              (),
    _sfCompTexCoord           (bool(false)),
    _sfHalfBBoxObj            (Real32(1.0)),
    Inherited()
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

LafortuneMaterialBase::LafortuneMaterialBase(const LafortuneMaterialBase &source) :
    _sfAmbient                (source._sfAmbient                ), 
    _sfDiffuse                (source._sfDiffuse                ), 
    _sfKa                     (source._sfKa                     ),
    _sfRho_d                  (source._sfRho_d                  ),
    _sfKs                     (source._sfKs                     ), 
    _sfEmission               (source._sfEmission               ), 
    _sfTransparency           (source._sfTransparency           ), 
    _sfCx                     (source._sfCx                     ), 
    _sfCz                     (source._sfCz                     ), 
    _sfN                      (source._sfN                      ), 
    _sfSelector               (source._sfSelector               ), 
    _sfLightPos               (source._sfLightPos               ), 
    _sfUseweight              (source._sfUseweight              ),
    _sfTextureImage           (source._sfTextureImage           ),
    _sfUseFPorRC              (source._sfUseFPorRC              ),
    _sfCompTexCoord           (source._sfCompTexCoord           ),
    _sfHalfBBoxObj            (source._sfHalfBBoxObj            ),
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

LafortuneMaterialBase::~LafortuneMaterialBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 LafortuneMaterialBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        returnValue += _sfAmbient.getBinSize();
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        returnValue += _sfDiffuse.getBinSize();
    }

    if(FieldBits::NoField != (KaFieldMask & whichField))
    {
        returnValue += _sfKa.getBinSize();
    }

    if(FieldBits::NoField != (Rho_dFieldMask & whichField))
    {
        returnValue += _sfRho_d.getBinSize();
    }

    if(FieldBits::NoField != (KsFieldMask & whichField))
    {
        returnValue += _sfKs.getBinSize();
    }

    if(FieldBits::NoField != (EmissionFieldMask & whichField))
    {
        returnValue += _sfEmission.getBinSize();
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        returnValue += _sfTransparency.getBinSize();
    }

    if(FieldBits::NoField != (CxFieldMask & whichField))
    {
        returnValue += _sfCx.getBinSize();
    }

    if(FieldBits::NoField != (CzFieldMask & whichField))
    {
        returnValue += _sfCz.getBinSize();
    }

    if(FieldBits::NoField != (NFieldMask & whichField))
    {
        returnValue += _sfN.getBinSize();
    }

    if(FieldBits::NoField != (SelectorFieldMask & whichField))
    {
        returnValue += _sfSelector.getBinSize();
    }

    if(FieldBits::NoField != (LightPosFieldMask & whichField))
    {
        returnValue += _sfLightPos.getBinSize();
    }

    if(FieldBits::NoField != (UseweightFieldMask & whichField))
    {
        returnValue += _sfUseweight.getBinSize();
    }

    if(FieldBits::NoField != (TextureImageFieldMask & whichField))
    {
        returnValue += _sfTextureImage.getBinSize();
    }

    if(FieldBits::NoField != (UseFPorRCFieldMask & whichField))
    {
        returnValue += _sfUseFPorRC.getBinSize();
    }

    if(FieldBits::NoField != (CompTexCoordFieldMask & whichField))
    {
        returnValue += _sfCompTexCoord.getBinSize();
    }

    if(FieldBits::NoField != (HalfBBoxObjFieldMask & whichField))
    {
        returnValue += _sfHalfBBoxObj.getBinSize();
    }


    return returnValue;
}

void LafortuneMaterialBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        _sfAmbient.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyToBin(pMem);
    }

    if(FieldBits::NoField != (KaFieldMask & whichField))
    {
        _sfKa.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Rho_dFieldMask & whichField))
    {
        _sfRho_d.copyToBin(pMem);
    }

    if(FieldBits::NoField != (KsFieldMask & whichField))
    {
        _sfKs.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EmissionFieldMask & whichField))
    {
        _sfEmission.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        _sfTransparency.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CxFieldMask & whichField))
    {
        _sfCx.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CzFieldMask & whichField))
    {
        _sfCz.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NFieldMask & whichField))
    {
        _sfN.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelectorFieldMask & whichField))
    {
        _sfSelector.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LightPosFieldMask & whichField))
    {
        _sfLightPos.copyToBin(pMem);
    }

    if(FieldBits::NoField != (UseweightFieldMask & whichField))
    {
        _sfUseweight.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TextureImageFieldMask & whichField))
    {
        _sfTextureImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (UseFPorRCFieldMask & whichField))
    {
        _sfUseFPorRC.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CompTexCoordFieldMask & whichField))
    {
        _sfCompTexCoord.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HalfBBoxObjFieldMask & whichField))
    {
        _sfHalfBBoxObj.copyToBin(pMem);
    }


}

void LafortuneMaterialBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        _sfAmbient.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (KaFieldMask & whichField))
    {
        _sfKa.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Rho_dFieldMask & whichField))
    {
        _sfRho_d.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (KsFieldMask & whichField))
    {
        _sfKs.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EmissionFieldMask & whichField))
    {
        _sfEmission.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        _sfTransparency.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CxFieldMask & whichField))
    {
        _sfCx.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CzFieldMask & whichField))
    {
        _sfCz.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NFieldMask & whichField))
    {
        _sfN.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelectorFieldMask & whichField))
    {
        _sfSelector.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LightPosFieldMask & whichField))
    {
        _sfLightPos.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (UseweightFieldMask & whichField))
    {
        _sfUseweight.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TextureImageFieldMask & whichField))
    {
        _sfTextureImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (UseFPorRCFieldMask & whichField))
    {
        _sfUseFPorRC.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CompTexCoordFieldMask & whichField))
    {
        _sfCompTexCoord.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HalfBBoxObjFieldMask & whichField))
    {
        _sfHalfBBoxObj.copyFromBin(pMem);
    }


}

void LafortuneMaterialBase::executeSyncImpl(      LafortuneMaterialBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
        _sfAmbient.syncWith(pOther->_sfAmbient);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
        _sfDiffuse.syncWith(pOther->_sfDiffuse);

    if(FieldBits::NoField != (KaFieldMask & whichField))
        _sfKa.syncWith(pOther->_sfKa);

    if(FieldBits::NoField != (Rho_dFieldMask & whichField))
        _sfRho_d.syncWith(pOther->_sfRho_d);

    if(FieldBits::NoField != (KsFieldMask & whichField))
        _sfKs.syncWith(pOther->_sfKs);

    if(FieldBits::NoField != (EmissionFieldMask & whichField))
        _sfEmission.syncWith(pOther->_sfEmission);

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
        _sfTransparency.syncWith(pOther->_sfTransparency);

    if(FieldBits::NoField != (CxFieldMask & whichField))
        _sfCx.syncWith(pOther->_sfCx);

    if(FieldBits::NoField != (CzFieldMask & whichField))
        _sfCz.syncWith(pOther->_sfCz);

    if(FieldBits::NoField != (NFieldMask & whichField))
        _sfN.syncWith(pOther->_sfN);

    if(FieldBits::NoField != (SelectorFieldMask & whichField))
        _sfSelector.syncWith(pOther->_sfSelector);

    if(FieldBits::NoField != (LightPosFieldMask & whichField))
        _sfLightPos.syncWith(pOther->_sfLightPos);

    if(FieldBits::NoField != (UseweightFieldMask & whichField))
        _sfUseweight.syncWith(pOther->_sfUseweight);

    if(FieldBits::NoField != (TextureImageFieldMask & whichField))
        _sfTextureImage.syncWith(pOther->_sfTextureImage);

    if(FieldBits::NoField != (UseFPorRCFieldMask & whichField))
        _sfUseFPorRC.syncWith(pOther->_sfUseFPorRC);

    if(FieldBits::NoField != (CompTexCoordFieldMask & whichField))
        _sfCompTexCoord.syncWith(pOther->_sfCompTexCoord);

    if(FieldBits::NoField != (HalfBBoxObjFieldMask & whichField))
        _sfHalfBBoxObj.syncWith(pOther->_sfHalfBBoxObj);


}



OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<LafortuneMaterialPtr>::_type("LafortuneMaterialPtr", "ChunkMaterialPtr");
#endif


OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGLafortuneMaterialBase.cpp,v 1.1 2003/12/03 21:49:52 jnkautz Exp $";
    static Char8 cvsid_hpp       [] = OSGLAFORTUNEMATERIALBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGLAFORTUNEMATERIALBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGLAFORTUNEMATERIALFIELDS_HEADER_CVSID;
}

